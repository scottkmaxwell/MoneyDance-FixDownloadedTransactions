from typing import Dict, List
import com.infinitekind.moneydance.model
import com.infinitekind.moneydance.online
import com.moneydance.apps.md.controller
import com.moneydance.apps.md.view.gui


class ChunkedInputStream('java.io.InputStream'):
    def __init__(self, j: 'java.io.InputStream'): ...
    
    def read(self) -> int: ...
    
    
class CustomURLStreamHandlerFactory('java.net.URLStreamHandlerFactory'):
    DEBUG = False
    DEBUG_STREAM = False
    MAX_REDIRECTS = 10
    
    def __init__(self, c: com.moneydance.apps.md.controller.Main): ...
    
    def createURLStreamHandler(self, s: str) -> 'java.net.URLStreamHandler': ...
    
    def openConnection(self, j: 'java.net.URL') -> 'java.net.URLConnection': ...
    
    @staticmethod
    def registerHeaderOrder(s: str, list: List[str]) -> None: ...
    
    @staticmethod
    def setDefaultAgent(s: str) -> None: ...
    
    
class EchoInputStream('java.io.InputStream'):
    def __init__(self, j: 'java.io.InputStream'): ...
    
    def close(self) -> None: ...
    
    def read(self) -> int: ...
    
    
class EchoOutputStream('java.io.OutputStream'):
    def __init__(self, j: 'java.io.OutputStream'): ...
    
    def close(self) -> None: ...
    
    def flush(self) -> None: ...
    
    def write(self, i: int) -> None: ...
    
    
class HTTPURLConnectionHelper:
    COOKIES_ENABLED = True
    DEFAULT_AGENT = u'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/11.1.2 Safari/605.1.15'
    DEFAULT_DO_NOT_TRACK = u'1'
    HTTP_PROTO_VERSION = u'1.1'
    
    def __init__(self): ...
    
    def addRequestProperty(self, s: str, s2: str) -> None: ...
    
    def disconnect(self) -> None: ...
    
    def getConnection(self) -> 'java.net.Socket': ...
    
    def getContentType(self) -> str: ...
    
    def getErrorStream(self) -> 'java.io.InputStream': ...
    
    def getHeaderField(self, i: int) -> str: ...
    
    def getHeaderFieldKey(self, i: int) -> str: ...
    
    def getHeaderFields(self) -> Dict[str,List[str]]: ...
    
    def getInputStream(self) -> 'java.io.InputStream': ...
    
    def getOutputStream(self) -> 'java.io.OutputStream': ...
    
    def getRequestProperties(self) -> Dict[str,List[str]]: ...
    
    def getRequestProperty(self, s: str) -> str: ...
    
    def getResponseMessage(self) -> str: ...
    
    @staticmethod
    def setDefaultAgent(s: str) -> None: ...
    
    def setRequestProperty(self, s: str, s2: str) -> None: ...
    
    def usingProxy(self) -> bool: ...
    
    
class Header:
    name = '<reflected field public java.lang.String com.moneydance.apps.md.controller.olb.Header.name at 0xafc>'
    value = '<reflected field public java.lang.String com.moneydance.apps.md.controller.olb.Header.value at 0xafd>'
    
    def __init__(self, header: 'Header'): ...
    
    def toString(self) -> str: ...
    
    
class Headers(list):
    def __init__(self): ...
    
    def copyAndMergeFrom(self, dict: Dict[str,List[str]]) -> 'Headers': ...
    
    def copyToMap(self) -> Dict[str,List[str]]: ...
    
    def getAllValues(self, s: str) -> List[str]: ...
    
    def getCompactString(self) -> str: ...
    
    def getHeaderWithName(self, s: str) -> Header: ...
    
    def getHeadersExcept(self, list: List[str]) -> 'Headers': ...
    
    def getHeadersString(self) -> str: ...
    
    def put(self, s: str, s2: str) -> None: ...
    
    def removeHeaderWithName(self, s: str) -> None: ...
    
    def set(self, dict: Dict[str,List[str]], b: bool) -> None: ...
    
    
class HttpCollectionListener:
    def __init__(self): ...
    
    def collectionFinished(self, httpCollector: 'HttpCollector') -> None: ...
    
    def getCollectionSpecs(self) -> List['HttpCollectorSpec']: ...
    
    
class HttpCollector:
    def __init__(self): ...
    
    def beginResponseCollection(self, j: 'java.net.URL', headers: Headers, j2: 'java.io.InputStream', b: bool, s: str) -> 'java.io.InputStream': ...
    
    def getFilename(self) -> str: ...
    
    def getHeaders(self) -> Headers: ...
    
    def getPageStream(self) -> 'java.io.InputStream': ...
    
    def getStreamEncoding(self) -> str: ...
    
    def getUrl(self) -> 'java.net.URL': ...
    
    def isDownload(self) -> bool: ...
    
    
class HttpCollectorSpec:
    def __init__(self, s: str, s2: str, s3: str, b: bool): ...
    
    def matchesResponse(self, j: 'java.net.URL', headers: Headers, b: bool) -> bool: ...
    
    def notifyCollectionOccurred(self, httpCollector: HttpCollector) -> None: ...
    
    
class HttpURLConnectionImpl('java.net.HttpURLConnection'):
    HTTP_ACCEPTED = 202
    HTTP_BAD_GATEWAY = 502
    HTTP_BAD_METHOD = 405
    HTTP_BAD_REQUEST = 400
    HTTP_CLIENT_TIMEOUT = 408
    HTTP_CONFLICT = 409
    HTTP_CREATED = 201
    HTTP_ENTITY_TOO_LARGE = 413
    HTTP_FORBIDDEN = 403
    HTTP_GATEWAY_TIMEOUT = 504
    HTTP_GONE = 410
    HTTP_INTERNAL_ERROR = 500
    HTTP_LENGTH_REQUIRED = 411
    HTTP_MOVED_PERM = 301
    HTTP_MOVED_TEMP = 302
    HTTP_MULT_CHOICE = 300
    HTTP_NOT_ACCEPTABLE = 406
    HTTP_NOT_AUTHORITATIVE = 203
    HTTP_NOT_FOUND = 404
    HTTP_NOT_IMPLEMENTED = 501
    HTTP_NOT_MODIFIED = 304
    HTTP_NO_CONTENT = 204
    HTTP_OK = 200
    HTTP_PARTIAL = 206
    HTTP_PAYMENT_REQUIRED = 402
    HTTP_PRECON_FAILED = 412
    HTTP_PROXY_AUTH = 407
    HTTP_REQ_TOO_LONG = 414
    HTTP_RESET = 205
    HTTP_SEE_OTHER = 303
    HTTP_SERVER_ERROR = 500
    HTTP_UNAUTHORIZED = 401
    HTTP_UNAVAILABLE = 503
    HTTP_UNSUPPORTED_TYPE = 415
    HTTP_USE_PROXY = 305
    HTTP_VERSION = 505
    
    def __init__(self, j: 'java.net.URL', j2: 'java.net.Proxy', moneybotURLStreamHandlerFactory: 'MoneybotURLStreamHandlerFactory'): ...
    
    def addRequestProperty(self, s: str, s2: str) -> None: ...
    
    def connect(self) -> None: ...
    
    def disconnect(self) -> None: ...
    
    def getContentType(self) -> str: ...
    
    def getErrorStream(self) -> 'java.io.InputStream': ...
    
    def getHeaderField(self, i: int) -> str: ...
    
    def getHeaderFieldKey(self, i: int) -> str: ...
    
    def getHeaderFields(self) -> Dict[str,List[str]]: ...
    
    def getInputStream(self) -> 'java.io.InputStream': ...
    
    def getOutputStream(self) -> 'java.io.OutputStream': ...
    
    def getRequestMethod(self) -> str: ...
    
    def getRequestProperty(self, s: str) -> str: ...
    
    def getResponseCode(self) -> int: ...
    
    def getResponseMessage(self) -> str: ...
    
    def getURL(self) -> 'java.net.URL': ...
    
    def setRequestMethod(self, s: str) -> None: ...
    
    def setRequestProperty(self, s: str, s2: str) -> None: ...
    
    def usingProxy(self) -> bool: ...
    
    
class HttpsHelper:
    def __init__(self): ...
    
    def getProxyConnection(self, s: str, i: int) -> 'java.net.Socket': ...
    
    def getSSLSocket(self, s: str, i: int) -> 'java.net.Socket': ...
    
    def init(self, c: com.moneydance.apps.md.controller.Main) -> None: ...
    
    def initHelper(self) -> None: ...
    
    
class HttpsHelper2(HttpsHelper):
    def __init__(self): ...
    
    def getFactory(self) -> 'javax.net.ssl.SSLSocketFactory': ...
    
    @staticmethod
    def getHelper() -> 'HttpsHelper2': ...
    
    @staticmethod
    def getOFXConnection(j: 'java.net.URL', b: bool) -> 'java.net.URLConnection': ...
    
    def getSSLSocket(self, s: str, i: int) -> 'java.net.Socket': ...
    
    def initHelper(self) -> None: ...
    
    @staticmethod
    def main(list: List[str]) -> None: ...
    
    
class HttpsURLConnectionImpl('javax.net.ssl.HttpsURLConnection'):
    HTTP_ACCEPTED = 202
    HTTP_BAD_GATEWAY = 502
    HTTP_BAD_METHOD = 405
    HTTP_BAD_REQUEST = 400
    HTTP_CLIENT_TIMEOUT = 408
    HTTP_CONFLICT = 409
    HTTP_CREATED = 201
    HTTP_ENTITY_TOO_LARGE = 413
    HTTP_FORBIDDEN = 403
    HTTP_GATEWAY_TIMEOUT = 504
    HTTP_GONE = 410
    HTTP_INTERNAL_ERROR = 500
    HTTP_LENGTH_REQUIRED = 411
    HTTP_MOVED_PERM = 301
    HTTP_MOVED_TEMP = 302
    HTTP_MULT_CHOICE = 300
    HTTP_NOT_ACCEPTABLE = 406
    HTTP_NOT_AUTHORITATIVE = 203
    HTTP_NOT_FOUND = 404
    HTTP_NOT_IMPLEMENTED = 501
    HTTP_NOT_MODIFIED = 304
    HTTP_NO_CONTENT = 204
    HTTP_OK = 200
    HTTP_PARTIAL = 206
    HTTP_PAYMENT_REQUIRED = 402
    HTTP_PRECON_FAILED = 412
    HTTP_PROXY_AUTH = 407
    HTTP_REQ_TOO_LONG = 414
    HTTP_RESET = 205
    HTTP_SEE_OTHER = 303
    HTTP_SERVER_ERROR = 500
    HTTP_UNAUTHORIZED = 401
    HTTP_UNAVAILABLE = 503
    HTTP_UNSUPPORTED_TYPE = 415
    HTTP_USE_PROXY = 305
    HTTP_VERSION = 505
    
    def __init__(self, j: 'java.net.URL', j2: 'java.net.Proxy', moneybotURLStreamHandlerFactory: 'MoneybotURLStreamHandlerFactory'): ...
    
    def addRequestProperty(self, s: str, s2: str) -> None: ...
    
    def connect(self) -> None: ...
    
    def disconnect(self) -> None: ...
    
    def getCipherSuite(self) -> str: ...
    
    def getContentType(self) -> str: ...
    
    def getErrorStream(self) -> 'java.io.InputStream': ...
    
    def getHeaderField(self, i: int) -> str: ...
    
    def getHeaderFieldKey(self, i: int) -> str: ...
    
    def getHeaderFields(self) -> Dict[str,List[str]]: ...
    
    def getInputStream(self) -> 'java.io.InputStream': ...
    
    def getLocalCertificates(self) -> List['java.security.cert.Certificate']: ...
    
    def getOutputStream(self) -> 'java.io.OutputStream': ...
    
    def getRequestMethod(self) -> str: ...
    
    def getRequestProperty(self, s: str) -> str: ...
    
    def getResponseCode(self) -> int: ...
    
    def getResponseMessage(self) -> str: ...
    
    def getServerCertificates(self) -> List['java.security.cert.Certificate']: ...
    
    def getURL(self) -> 'java.net.URL': ...
    
    def setRequestMethod(self, s: str) -> None: ...
    
    def setRequestProperty(self, s: str, s2: str) -> None: ...
    
    def usingProxy(self) -> bool: ...
    
    
class LimitedInputStream('java.io.InputStream'):
    def __init__(self, j: 'java.io.InputStream', i: int): ...
    
    def close(self) -> None: ...
    
    def read(self) -> int: ...
    
    
class MDCookie:
    def __init__(self): ...
    
    def canSendTo(self, j: 'java.net.URL') -> bool: ...
    
    def getDomain(self) -> str: ...
    
    def getPath(self) -> str: ...
    
    def isExpired(self) -> bool: ...
    
    def isValid(self) -> bool: ...
    
    @staticmethod
    def loadFromResponse(j: 'java.net.URL', s: str) -> 'MDCookie': ...
    
    @staticmethod
    def loadFromStorage(s: str) -> 'MDCookie': ...
    
    def overrides(self, mDCookie: 'MDCookie') -> bool: ...
    
    def shouldAcceptFrom(self, j: 'java.net.URL') -> bool: ...
    
    def toClientHeaderValue(self) -> str: ...
    
    def toServerString(self) -> str: ...
    
    def toString(self) -> str: ...
    
    
class MDPlusURLs('java.lang.Enum'):
    EXCHANGE_SIG_FOR_TOKEN = 'EXCHANGE_SIG_FOR_TOKEN'
    GET_NONCE = 'GET_NONCE'
    KEY_STATUS_BASE = 'KEY_STATUS_BASE'
    PLAID_LINK = 'PLAID_LINK'
    REGISTER_PUBKEY = 'REGISTER_PUBKEY'
    REMOVE_KEY_PAYLOAD = 'REMOVE_KEY_PAYLOAD'
    SET_TOKEN_COOKIE = 'SET_TOKEN_COOKIE'
    SHOW_ACCOUNT = 'SHOW_ACCOUNT'
    
    def __init__(self): ...
    
    def getURI(self) -> 'java.net.URI': ...
    
    def getURL(self) -> str: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MDPlusURLs': ...
    
    @staticmethod
    def values() -> List['MDPlusURLs']: ...
    
    
class MoneybotURLStreamHandlerFactory('java.net.URLStreamHandlerFactory'):
    DEBUG = False
    DEBUG_PROXY = None
    DEBUG_STREAM = False
    DEFAULT_DO_NOT_TRACK = u'1'
    MAX_REDIRECTS = 16
    REQUEST_LOG_BASE = None
    
    def __init__(self): ...
    
    def addCollectionListener(self, httpCollectionListener: HttpCollectionListener) -> None: ...
    
    def createURLStreamHandler(self, s: str) -> 'java.net.URLStreamHandler': ...
    
    @staticmethod
    def initialize(b: bool) -> 'MoneybotURLStreamHandlerFactory': ...
    
    @staticmethod
    def main(list: List[str]) -> None: ...
    
    def openConnection(self, j: 'java.net.URL') -> 'java.net.URLConnection': ...
    
    def removeCollectionListener(self, httpCollectionListener: HttpCollectionListener) -> None: ...
    
    def setDefaultDownloadHandler(self, httpCollectionListener: HttpCollectionListener) -> None: ...
    
    
class OLBConnection:
    DEBUG = False
    DEBUG_MESSAGES = False
    
    def __init__(self): ...
    
    def changePIN(self, c: com.infinitekind.moneydance.online.OFXAuthInfo, s: str) -> None: ...
    
    def createNewMail(self, c: com.moneydance.apps.md.view.gui.MDAccountProxy, c2: com.infinitekind.moneydance.model.OnlineMail) -> None: ...
    
    def createPayee(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy, c2: com.infinitekind.moneydance.model.OnlinePayee) -> None: ...
    
    def createPayment(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy, c2: com.infinitekind.moneydance.model.OnlinePayment, c3: com.infinitekind.moneydance.model.OnlinePayee) -> com.infinitekind.moneydance.model.OnlinePayment: ...
    
    def editPayment(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy, c2: com.infinitekind.moneydance.model.OnlinePayment) -> com.infinitekind.moneydance.model.OnlinePayment: ...
    
    def getFIID(self) -> str: ...
    
    def getTransactions(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy) -> None: ...
    
    def modifyPayee(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy, c2: com.infinitekind.moneydance.model.OnlinePayee) -> None: ...
    
    def refreshPaymentList(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy) -> None: ...
    
    def refreshServiceInfo(self) -> None: ...
    
    def removePayee(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy, c2: com.infinitekind.moneydance.model.OnlinePayee) -> None: ...
    
    def removePayment(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy, c2: com.infinitekind.moneydance.model.OnlinePayment) -> None: ...
    
    def setDebugWriter(self, j: 'java.io.Writer') -> None: ...
    
    def syncMail(self, c: com.moneydance.apps.md.view.gui.MDAccountProxy) -> None: ...
    
    def syncPayeeList(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy) -> None: ...
    
    def syncPaymentList(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy) -> None: ...
    
    def updateAccountList(self) -> bool: ...
    
    
class OnlineConnectionMode('java.lang.Enum'):
    BANKING = 'BANKING'
    BILLPAY = 'BILLPAY'
    
    def __init__(self): ...
    
    @staticmethod
    def valueOf(s: str) -> 'OnlineConnectionMode': ...
    
    @staticmethod
    def values() -> List['OnlineConnectionMode']: ...
    
    
