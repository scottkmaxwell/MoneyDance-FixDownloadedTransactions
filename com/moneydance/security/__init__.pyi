from typing import List
import com.infinitekind.util


class DSAParamsImpl('java.security.interfaces.DSAParams'):
    def __init__(self, i: int, i2: int, i3: int): ...
    
    def getG(self) -> int: ...
    
    def getP(self) -> int: ...
    
    def getQ(self) -> int: ...
    
    
class DSAPrivateKeyImpl('java.security.interfaces.DSAPrivateKey'):
    serialVersionUID = '7776497482533790279'
    
    def __init__(self, i: int, j: 'java.security.interfaces.DSAParams'): ...
    
    def getAlgorithm(self) -> str: ...
    
    def getEncoded(self) -> List[int]: ...
    
    def getFormat(self) -> str: ...
    
    def getParams(self) -> 'java.security.interfaces.DSAParams': ...
    
    def getX(self) -> int: ...
    
    
class DSAPublicKeyImpl('java.security.interfaces.DSAPublicKey'):
    serialVersionUID = '1234526332779022332'
    
    def __init__(self, i: int, j: 'java.security.interfaces.DSAParams'): ...
    
    def getAlgorithm(self) -> str: ...
    
    def getEncoded(self) -> List[int]: ...
    
    def getFormat(self) -> str: ...
    
    def getParams(self) -> 'java.security.interfaces.DSAParams': ...
    
    def getY(self) -> int: ...
    
    
class KeyUtil:
    ALG_ID_DES = u'des'
    ALG_ID_DSA = u'dsa'
    ALG_ID_MD5 = u'md5'
    ALG_ID_RSA = u'rsa'
    ALG_ID_SHA = u'sha'
    KEYTYPE_PRIVATE = u'private'
    KEYTYPE_PUBLIC = u'public'
    KEY_ALG_ID = u'alg'
    KEY_CIPHERTEXT = u'ciphertext'
    KEY_KEY_TYPE = u'keytype'
    KEY_PASSPHRASE_HASH = u'passwdhashalg'
    
    def __init__(self): ...
    
    @staticmethod
    def decodePrivateKey(c: com.infinitekind.util.StreamTable, secretKeyCallback: 'SecretKeyCallback') -> 'java.security.PrivateKey': ...
    
    @staticmethod
    def decodePublicKey(c: com.infinitekind.util.StreamTable) -> 'java.security.PublicKey': ...
    
    @staticmethod
    def decryptBytes(c: com.infinitekind.util.StreamTable, list: List[int]) -> List[int]: ...
    
    @staticmethod
    def decryptString(c: com.infinitekind.util.StreamTable, s: str) -> str: ...
    
    @staticmethod
    def encodeKey(j: 'java.security.PublicKey') -> com.infinitekind.util.StreamTable: ...
    
    @staticmethod
    def encryptBytes(list: List[int], s: str) -> com.infinitekind.util.StreamTable: ...
    
    @staticmethod
    def encryptString(s: str, s2: str) -> com.infinitekind.util.StreamTable: ...
    
    @staticmethod
    def getAES128EncryptionStream(list: List[int], j: 'java.io.DataOutputStream') -> 'java.io.OutputStream': ...
    
    @staticmethod
    def getDecryptionStream(s: str, j: 'java.io.DataInputStream') -> 'java.io.InputStream': ...
    
    @staticmethod
    def getEncryptionStream(list: List[int], j: 'java.io.DataOutputStream') -> 'java.io.OutputStream': ...
    
    @staticmethod
    def getHarderEncryptionStream(list: List[int], j: 'java.io.DataOutputStream') -> 'java.io.OutputStream': ...
    
    @staticmethod
    def getPassphrase(s: str) -> List[int]: ...
    
    @staticmethod
    def getPassphraseFromString(s: str) -> List[int]: ...
    
    @staticmethod
    def getPublicKey(s: str) -> 'java.security.PublicKey': ...
    
    @staticmethod
    def getSignatureForKey(j: 'java.security.Key') -> 'java.security.Signature': ...
    
    @staticmethod
    def getStringFromPassphrase(list: List[int]) -> str: ...
    
    @staticmethod
    def main(list: List[str]) -> None: ...
    
    
class RSAPrivateKeyImpl('java.security.interfaces.RSAPrivateKey'):
    serialVersionUID = '5187144804936595022'
    
    def __init__(self, i: int, i2: int, s: str, s2: str): ...
    
    def getAlgorithm(self) -> str: ...
    
    def getEncoded(self) -> List[int]: ...
    
    def getFormat(self) -> str: ...
    
    def getModulus(self) -> int: ...
    
    def getPrivateExponent(self) -> int: ...
    
    
class RSAPublicKeyImpl('java.security.interfaces.RSAPublicKey'):
    serialVersionUID = '-8727434096241101194'
    
    def __init__(self, s: str, s2: str, i: int, i2: int): ...
    
    def getAlgorithm(self) -> str: ...
    
    def getEncoded(self) -> List[int]: ...
    
    def getFormat(self) -> str: ...
    
    def getModulus(self) -> int: ...
    
    def getPublicExponent(self) -> int: ...
    
    
class SecretKeyCallback:
    def __init__(self): ...
    
    def getPassphrase(self, s: str) -> str: ...
    
    def setVerifier(self, secretKeyVerifier: 'SecretKeyVerifier') -> None: ...
    
    
class SecretKeyVerifier:
    def __init__(self): ...
    
    def verifySecretKey(self, s: str) -> bool: ...
    
    
