from typing import Callable, Dict, Iterable, Iterator, List, Sequence, Set
import com.infinitekind.tiksync
import com.infinitekind.util


class MoneydanceSyncableItem(com.infinitekind.tiksync.SyncableItem):
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    
    def __init__(self): ...
    
    def addParameters(self, dict: Dict[str,str]) -> None: ...
    
    def addTags(self, dict: Dict[str,str]) -> None: ...
    
    @staticmethod
    def decodeKeywordList(s: str) -> List[str]: ...
    
    def deleteItem(self) -> bool: ...
    
    def doesParameterExist(self, s: str) -> bool: ...
    
    def duplicate(self) -> 'MoneydanceSyncableItem': ...
    
    @staticmethod
    def encodeKeywordList(list: List[str]) -> str: ...
    
    def equals(self, o: object) -> bool: ...
    
    def getAccountParameter(self, s: str, s2: str, account: 'Account') -> 'Account': ...
    
    def getAddress(self) -> 'AddressBookEntry': ...
    
    def getAddressParameter(self, s: str, s2: str, addressBookEntry: 'AddressBookEntry') -> 'AddressBookEntry': ...
    
    def getBook(self) -> 'AccountBook': ...
    
    def getBooleanParameter(self, s: str, b: bool) -> bool: ...
    
    def getCurrencyParameter(self, s: str, currencyType: 'CurrencyType') -> 'CurrencyType': ...
    
    def getDoubleParameter(self, s: str, f: float) -> float: ...
    
    def getIntParameter(self, s: str, i: int) -> int: ...
    
    def getKeywords(self) -> List[str]: ...
    
    def getLongParameter(self, s: str, i: int) -> int: ...
    
    def getOriginalItem(self) -> 'MoneydanceSyncableItem': ...
    
    def getParameter(self, s: str) -> str: ...
    
    def getParameterCount(self) -> int: ...
    
    def getParameterKeys(self) -> Set[str]: ...
    
    def getPreference(self, s: str, s2: str) -> str: ...
    
    def getPreferenceBoolean(self, s: str, b: bool) -> bool: ...
    
    def getPreferenceDouble(self, s: str, f: float) -> float: ...
    
    def getPreferenceInt(self, s: str, i: int) -> int: ...
    
    def getPreferenceIntArray(self, s: str) -> List[int]: ...
    
    def getPreferenceLong(self, s: str, i: int) -> int: ...
    
    def getPreferenceStringList(self, s: str) -> List[str]: ...
    
    def getPreferenceSublist(self, s: str) -> List[com.infinitekind.tiksync.SyncRecord]: ...
    
    def getPreferenceSubset(self, s: str) -> com.infinitekind.tiksync.SyncRecord: ...
    
    def getStringListParameter(self, s: str) -> List[str]: ...
    
    def getSyncInfo(self) -> com.infinitekind.tiksync.SyncRecord: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getSyncTimestamp(self) -> int: ...
    
    def getUUID(self) -> str: ...
    
    def hasBeenSynced(self) -> bool: ...
    
    def hasKeywordSubstring(self, s: str, b: bool) -> bool: ...
    
    def hashCode(self) -> int: ...
    
    def itemWasUpdated(self, c: com.infinitekind.tiksync.SyncRecord) -> None: ...
    
    def itemWillSync(self, c: com.infinitekind.tiksync.SyncRecord) -> None: ...
    
    @staticmethod
    def makeSyncableItem(accountBook: 'AccountBook', c: com.infinitekind.tiksync.SyncRecord) -> 'MoneydanceSyncableItem': ...
    
    def removeParameter(self, s: str) -> None: ...
    
    def setAccountParameter(self, s: str, s2: str, account: 'Account') -> None: ...
    
    def setAddress(self, addressBookEntry: 'AddressBookEntry') -> None: ...
    
    def setAddressParameter(self, s: str, s2: str, addressBookEntry: 'AddressBookEntry') -> None: ...
    
    def setCurrencyParameter(self, s: str, currencyType: 'CurrencyType') -> None: ...
    
    def setEditingMode(self) -> None: ...
    
    def setKeywords(self, list: List[str]) -> None: ...
    
    def setParameter(self, s: str, i: int) -> None: ...
    
    def setParameterNoNotify(self, s: str, s2: str) -> None: ...
    
    def setPreference(self, s: str, i: int) -> None: ...
    
    def syncItem(self) -> bool: ...
    
    
class Txn:
    def __init__(self): ...
    
    def getAccount(self) -> 'Account': ...
    
    def getCheckNumAsInt(self) -> int: ...
    
    def getCheckNumber(self) -> str: ...
    
    def getClearedStatus(self) -> str: ...
    
    def getDateEntered(self) -> int: ...
    
    def getDateInt(self) -> int: ...
    
    def getDescription(self) -> str: ...
    
    def getKeywords(self) -> List[str]: ...
    
    def getOtherTxn(self, i: int) -> 'AbstractTxn': ...
    
    def getOtherTxnCount(self) -> int: ...
    
    def getParameter(self, s: str) -> str: ...
    
    def getParentTxn(self) -> 'ParentTxn': ...
    
    def getStatus(self) -> int: ...
    
    def getStatusChar(self) -> int: ...
    
    def getTaxDateInt(self) -> int: ...
    
    def getTransferType(self) -> str: ...
    
    def getValue(self) -> int: ...
    
    def isNew(self) -> bool: ...
    
    def isTransferTo(self, account: 'Account') -> bool: ...
    
    def setClearedStatus(self, s: str) -> None: ...
    
    def setStatus(self, i: int) -> None: ...
    
    
class AbstractTxn(MoneydanceSyncableItem, Txn):
    BANK_TRANSACTION_TYPE = 0
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    PRINT_CHECKNUM_PREFIX = u'{'
    PRINT_CHECKNUM_SUFFIX = u'}'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SPLIT_TRANSACTION_TYPE = 1
    STATUS_CLEARED = 20
    STATUS_RECONCILING = 30
    STATUS_UNRECONCILED = 40
    TAG_FITID_PREFIX = u'ol_fitid_'
    TAG_FI_ID = u'ol_fi_id'
    TAG_INVST_SPLIT_EXP = u'exp'
    TAG_INVST_SPLIT_FEE = u'fee'
    TAG_INVST_SPLIT_INC = u'inc'
    TAG_INVST_SPLIT_SEC = u'sec'
    TAG_INVST_SPLIT_TYPE = u'invest.splittype'
    TAG_INVST_SPLIT_XFR = u'xfr'
    TAG_INVST_TXN_TYPE = u'invest.txntype'
    TAG_IS_NEW_TXN = u'ol.match-status'
    TAG_ONLINE_PMT_ID = u'ol_pmtid'
    TAG_QIF_IMPORT_SESSION = u'qif_sn'
    TAG_QIF_INVST_ACTION = u'qif_invst_action'
    TAG_RECON_ASOFDT = u'rec_asof'
    TAG_RECON_DATE = u'rec_dt'
    TAG_SPLIT_ADDED = u'split_added'
    TAG_SPLIT_AMOUNT = u'split_amount'
    TAG_SPLIT_CALC = u'split_calc'
    TAG_SPLIT_PAIR = u'split_pair'
    TRANSFER_TYPE_BANK = u'xfrtp_bank'
    TRANSFER_TYPE_BUYSELL = u'xfrtp_buysell'
    TRANSFER_TYPE_BUYSELLXFR = u'xfrtp_buysellxfr'
    TRANSFER_TYPE_DIVIDEND = u'xfrtp_dividend'
    TRANSFER_TYPE_DIVIDENDXFR = u'xfrtp_dividendxfr'
    TRANSFER_TYPE_MISCINCEXP = u'xfrtp_miscincexp'
    TRANSFER_TYPE_SHORTCOVER = u'xfrtp_shortcover'
    
    def __init__(self, accountBook: 'AccountBook'): ...
    
    def getAccount(self) -> 'Account': ...
    
    def getAddress(self) -> 'AddressBookEntry': ...
    
    def getAttachmentKeys(self) -> List[str]: ...
    
    def getAttachmentTag(self, s: str) -> str: ...
    
    def getCheckNumAsInt(self) -> int: ...
    
    def getCheckNumAsLong(self) -> int: ...
    
    def getCheckNumber(self) -> str: ...
    
    def getClearedStatus(self) -> str: ...
    
    def getDateEntered(self) -> int: ...
    
    def getDateInt(self) -> int: ...
    
    def getDatePostedOnline(self) -> int: ...
    
    def getDescription(self) -> str: ...
    
    def getFIID(self) -> str: ...
    
    def getFiTxnId(self, i: int) -> str: ...
    
    def getOldTxnID(self) -> int: ...
    
    def getOriginalOnlineTxn(self) -> 'OnlineTxn': ...
    
    def getOtherTxn(self, i: int) -> 'AbstractTxn': ...
    
    def getOtherTxnCount(self) -> int: ...
    
    def getParentTxn(self) -> 'ParentTxn': ...
    
    def getStatus(self) -> int: ...
    
    def getStatusChar(self) -> int: ...
    
    def getTags(self) -> com.infinitekind.tiksync.SyncRecord: ...
    
    def getTaxDateInt(self) -> int: ...
    
    def getTransferType(self) -> str: ...
    
    def getValue(self) -> int: ...
    
    def hasAttachments(self) -> bool: ...
    
    def isDirty(self) -> bool: ...
    
    def isNew(self) -> bool: ...
    
    def isTransferTo(self, account: 'Account') -> bool: ...
    
    def loadFromStorage(self, dict: Dict[str,str]) -> None: ...
    
    def needsToBePrinted(self) -> bool: ...
    
    def removeAttachmentTag(self, s: str) -> None: ...
    
    def resetDirty(self) -> None: ...
    
    def setAccount(self, account: 'Account') -> None: ...
    
    def setAttachmentTag(self, s: str, j: 'java.io.File') -> None: ...
    
    def setClearedStatus(self, s: str) -> None: ...
    
    def setDescription(self, s: str) -> None: ...
    
    def setDirty(self) -> None: ...
    
    def setFIID(self, s: str) -> None: ...
    
    def setFiTxnId(self, i: int, s: str) -> None: ...
    
    def setIsNew(self, b: bool) -> None: ...
    
    def setOriginalOnlineTxn(self, onlineTxn: 'OnlineTxn') -> None: ...
    
    def setStatus(self, i: int) -> None: ...
    
    def wasDownloaded(self) -> bool: ...
    
    
    class ClearedStatus:
        CLEARED = 'CLEARED'
        RECONCILING = 'RECONCILING'
        UNRECONCILED = 'UNRECONCILED'
        
        def __init__(self): ...
        
        def legacyValue(self) -> int: ...
        
        @staticmethod
        def statusForByte(i: int) -> str: ...
        
        @staticmethod
        def statusForString(s: str) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    
class Account(MoneydanceSyncableItem):
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    MONEYBOT_ID_KEY = u'moneybot_id'
    PARAM_INCLUDE_IN_NET_WORTH = u'applies_to_net_worth'
    PARAM_QIF_TXNID = u'qif.txn.lastid'
    PARAM_TAX_RELATED = u'tax_related'
    PARAM_VAT_ACCT = u'vat_acct'
    PARAM_VAT_ACCTID = u'vat_acct_id'
    PARAM_VAT_APPLIES = u'vat_applies'
    PARAM_VAT_PCT = u'vat_pct'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SPLIT_ACCOUNT_ID = -1
    SYNCABLE_TYPE_VALUE = u'acct'
    
    def __init__(self, accountBook: 'AccountBook'): ...
    
    def adjustStartBalance(self, adjust_amount: int) -> None: ...
    
    def balanceIsNegated(self) -> bool: ...
    
    def canDownloadTxns(self) -> bool: ...
    
    def checkedInitialTransfer(self) -> bool: ...
    
    def compareFullPathToAccount(self, account: 'Account') -> int: ...
    
    def compareToAccount(self, account: 'Account') -> int: ...
    
    def downloadedTxnsUpdated(self) -> None: ...
    
    def dumpAccounts(self) -> None: ...
    
    def ensureAccountStructure(self) -> None: ...
    
    def getAPR(self) -> float: ...
    
    def getAPRPercent(self) -> float: ...
    
    def getAccountByName(self, s: str) -> 'Account': ...
    
    def getAccountDescription(self) -> str: ...
    
    def getAccountIsInactive(self) -> bool: ...
    
    def getAccountName(self) -> str: ...
    
    def getAccountNum(self) -> int: ...
    
    def getAccountOrParentIsInactive(self) -> bool: ...
    
    def getAccountType(self) -> str: ...
    
    def getAllAccountNames(self) -> List[str]: ...
    
    def getAnnualFee(self) -> int: ...
    
    def getBalance(self) -> int: ...
    
    def getBankAccountNumber(self) -> str: ...
    
    def getBankName(self) -> str: ...
    
    def getBankingFI(self) -> 'OnlineService': ...
    
    def getBillPayFI(self) -> 'OnlineService': ...
    
    def getBondType(self) -> int: ...
    
    def getBroker(self) -> str: ...
    
    def getBrokerPhone(self) -> str: ...
    
    def getCalcPmt(self) -> bool: ...
    
    def getCardExpirationMonth(self) -> int: ...
    
    def getCardExpirationYear(self) -> int: ...
    
    def getCardNumber(self) -> str: ...
    
    def getCheckNumSettings(self) -> 'CheckNumSettings': ...
    
    def getCheckNumTags(self, s: str) -> List[str]: ...
    
    def getClearedBalance(self) -> int: ...
    
    def getComment(self) -> str: ...
    
    def getCompounding(self) -> 'CompoundingType': ...
    
    def getConfirmedBalance(self) -> int: ...
    
    def getCreationDate(self) -> int: ...
    
    def getCreationDateInt(self) -> int: ...
    
    def getCreditLimit(self) -> int: ...
    
    def getCurrencyChoice(self) -> str: ...
    
    def getCurrencyType(self) -> 'CurrencyType': ...
    
    def getCurrentBalance(self) -> int: ...
    
    def getDebtPaymentAmount(self) -> int: ...
    
    def getDebtPaymentProportion(self) -> float: ...
    
    def getDebtPaymentSpec(self) -> str: ...
    
    def getDefaultAccount(self, acctFilter: 'AcctFilter', s: str) -> 'Account': ...
    
    def getDefaultCategory(self) -> 'Account': ...
    
    def getDefaultTransferAccount(self) -> 'Account': ...
    
    def getDepth(self) -> int: ...
    
    def getDividend(self) -> int: ...
    
    def getDownloadedTxns(self) -> 'OnlineTxnList': ...
    
    def getEscrow(self) -> bool: ...
    
    def getEscrowAccount(self) -> 'Account': ...
    
    def getEscrowPayment(self) -> int: ...
    
    def getExchange(self) -> str: ...
    
    def getFaceValue(self) -> int: ...
    
    def getFixedMonthlyPaymentAmount(self) -> int: ...
    
    def getFullAccountName(self) -> str: ...
    
    def getHideOnHomePage(self) -> bool: ...
    
    def getIndentedName(self) -> str: ...
    
    def getInitialPrincipal(self) -> int: ...
    
    def getInitialTransfer(self) -> AbstractTxn: ...
    
    def getInstitutionName(self) -> str: ...
    
    def getInterestAccount(self) -> 'Account': ...
    
    def getInterestRate(self) -> float: ...
    
    def getInvestAccountNumber(self) -> str: ...
    
    def getInvstCommissionAcct(self) -> 'Account': ...
    
    def getMaturity(self) -> int: ...
    
    def getMonth(self) -> int: ...
    
    def getNextCheckNumber(self) -> int: ...
    
    def getNextCheckNumberLong(self) -> int: ...
    
    def getNumPayments(self) -> int: ...
    
    def getNumYears(self) -> int: ...
    
    def getOFXAccountKey(self) -> str: ...
    
    def getOFXAccountMsgType(self) -> int: ...
    
    def getOFXAccountNumber(self) -> str: ...
    
    def getOFXAccountType(self) -> str: ...
    
    def getOFXBankID(self) -> str: ...
    
    def getOFXBillPayAccountNumber(self) -> str: ...
    
    def getOFXBillPayAccountType(self) -> str: ...
    
    def getOFXBillPayBankID(self) -> str: ...
    
    def getOFXBranchID(self) -> str: ...
    
    def getOFXBrokerID(self) -> str: ...
    
    def getOnlinePayees(self) -> 'OnlinePayeeList': ...
    
    def getOnlinePayments(self) -> 'OnlinePaymentList': ...
    
    def getOptionPrice(self) -> float: ...
    
    def getParentAccount(self) -> 'Account': ...
    
    def getParentAtDepth(self, i: int) -> 'Account': ...
    
    def getPath(self) -> List['Account']: ...
    
    def getPaymentSchedule(self) -> 'PaymentSchedule': ...
    
    def getPaymentsPerYear(self) -> int: ...
    
    def getPermanentAPR(self) -> float: ...
    
    def getPoints(self) -> float: ...
    
    def getPreferredSortAscending(self, b: bool) -> bool: ...
    
    def getPreferredSortOrder(self, i: int) -> int: ...
    
    def getPreferredTwoLines(self, b: bool) -> bool: ...
    
    def getPut(self) -> bool: ...
    
    def getRateChangeDate(self) -> int: ...
    
    def getReconcilingBalance(self) -> int: ...
    
    def getRecursiveBalance(self) -> int: ...
    
    def getRecursiveClearedBalance(self) -> int: ...
    
    def getRecursiveCurrentBalance(self) -> int: ...
    
    def getRecursiveReconcilingBalance(self) -> int: ...
    
    def getRecursiveStartBalance(self) -> int: ...
    
    def getRecursiveUserBalance(self) -> int: ...
    
    def getRecursiveUserClearedBalance(self) -> int: ...
    
    def getRecursiveUserCurrentBalance(self) -> int: ...
    
    def getRecursiveUserReconcilingBalance(self) -> int: ...
    
    def getRecursiveUserStartBalance(self) -> int: ...
    
    def getReminder(self) -> bool: ...
    
    def getRootAccount(self) -> 'Account': ...
    
    def getSecuritySubType(self) -> str: ...
    
    def getSecurityType(self) -> 'SecurityType': ...
    
    def getStartBalance(self) -> int: ...
    
    def getStrikePrice(self) -> int: ...
    
    def getSubAccount(self, i: int) -> 'Account': ...
    
    def getSubAccountCount(self) -> int: ...
    
    def getSubAccounts(self) -> List['Account']: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getTaxCategory(self) -> str: ...
    
    def getTxnCount(self) -> int: ...
    
    def getUnconfirmedTxnCount(self) -> int: ...
    
    def getUserBalance(self) -> int: ...
    
    def getUserClearedBalance(self) -> int: ...
    
    def getUserConfirmedBalance(self) -> int: ...
    
    def getUserCurrentBalance(self) -> int: ...
    
    def getUserReconcilingBalance(self) -> int: ...
    
    def getUserStartBalance(self) -> int: ...
    
    def getUsesAverageCost(self) -> bool: ...
    
    def hasExpiringRate(self) -> bool: ...
    
    def indexOf(self, account: 'Account') -> int: ...
    
    def isAncestorOf(self, account: 'Account') -> bool: ...
    
    def isDeductible(self) -> bool: ...
    
    def isDescendantOf(self, account: 'Account') -> bool: ...
    
    def isDirty(self) -> bool: ...
    
    def isLeafNode(self) -> bool: ...
    
    def isOnlineBankingCandidate(self) -> bool: ...
    
    def isOnlineBillpayCandidate(self) -> bool: ...
    
    def isOnlineEnabled(self) -> bool: ...
    
    def isRegisterAccount(self) -> bool: ...
    
    def isTaxRelated(self) -> bool: ...
    
    def isTaxable(self) -> bool: ...
    
    def itemWasUpdated(self) -> None: ...
    
    def itemWillSync(self) -> None: ...
    
    @staticmethod
    def makeAccount(accountBook: 'AccountBook', s: str, account: 'Account') -> 'Account': ...
    
    def markAsGhostAccount(self) -> None: ...
    
    def migrateFromOldDownloadedTxns(self) -> 'OnlineTxnList': ...
    
    def notifyAccountModified(self) -> None: ...
    
    def setAPR(self, f: float) -> None: ...
    
    def setAPRPercent(self, f: float) -> None: ...
    
    def setAccountDescription(self, s: str) -> None: ...
    
    def setAccountIsInactive(self, b: bool) -> None: ...
    
    def setAccountName(self, s: str) -> None: ...
    
    def setAccountType(self, s: str) -> None: ...
    
    def setAnnualFee(self, i: int) -> None: ...
    
    def setBankAccountNumber(self, s: str) -> None: ...
    
    def setBankName(self, s: str) -> None: ...
    
    def setBankingFI(self, onlineService: 'OnlineService') -> None: ...
    
    def setBillPayFI(self, onlineService: 'OnlineService') -> None: ...
    
    def setBondType(self, i: int) -> None: ...
    
    def setBroker(self, s: str) -> None: ...
    
    def setBrokerPhone(self, s: str) -> None: ...
    
    def setCalcPmt(self, b: bool) -> None: ...
    
    def setCardExpirationMonth(self, i: int) -> None: ...
    
    def setCardExpirationYear(self, i: int) -> None: ...
    
    def setCardNumber(self, s: str) -> None: ...
    
    def setCheckNumSettings(self, checkNumSettings: 'CheckNumSettings') -> None: ...
    
    def setCheckNumTags(self, list: List[str]) -> None: ...
    
    def setCheckedInitialTransfer(self) -> None: ...
    
    def setComment(self, s: str) -> None: ...
    
    def setCompounding(self, compoundingType: 'CompoundingType') -> None: ...
    
    def setCreationDate(self, i: int) -> None: ...
    
    def setCreationDateInt(self, i: int) -> None: ...
    
    def setCreditLimit(self, i: int) -> None: ...
    
    def setCurrencyChoice(self, s: str) -> None: ...
    
    def setCurrencyType(self, currencyType: 'CurrencyType') -> None: ...
    
    def setDebtPaymentAmount(self, i: int) -> None: ...
    
    def setDebtPaymentProportion(self, f: float) -> None: ...
    
    def setDebtPaymentSpec(self, s: str) -> None: ...
    
    def setDeductible(self, b: bool) -> None: ...
    
    def setDefaultAccount(self, s: str, account: 'Account') -> None: ...
    
    def setDefaultCategory(self, account: 'Account') -> None: ...
    
    def setDefaultTransferAccount(self, account: 'Account') -> None: ...
    
    def setDirtyFlag(self) -> None: ...
    
    def setDividend(self, i: int) -> None: ...
    
    def setEscrow(self, b: bool) -> None: ...
    
    def setEscrowAccount(self, account: 'Account') -> None: ...
    
    def setEscrowPayment(self, i: int) -> None: ...
    
    def setExchange(self, s: str) -> None: ...
    
    def setFaceValue(self, i: int) -> None: ...
    
    def setFixedMonthlyPaymentAmount(self, i: int) -> None: ...
    
    def setHasExpiringRate(self, b: bool) -> None: ...
    
    def setHideOnHomePage(self, b: bool) -> None: ...
    
    def setIncludeInNetWorth(self, b: bool) -> None: ...
    
    def setInitialPrincipal(self, i: int) -> None: ...
    
    def setInitialTransfer(self, abstractTxn: AbstractTxn) -> None: ...
    
    def setInstitutionName(self, s: str) -> None: ...
    
    def setInterestAccount(self, account: 'Account') -> None: ...
    
    def setInterestRate(self, f: float) -> None: ...
    
    def setInvestAccountNumber(self, s: str) -> None: ...
    
    def setMaturity(self, i: int) -> None: ...
    
    def setMonth(self, i: int) -> None: ...
    
    def setNumPayments(self, i: int) -> None: ...
    
    def setNumYears(self, i: int) -> None: ...
    
    def setOFXAccountKey(self, s: str) -> None: ...
    
    def setOFXAccountMsgType(self, i: int) -> None: ...
    
    def setOFXAccountNumber(self, s: str) -> None: ...
    
    def setOFXAccountType(self, s: str) -> None: ...
    
    def setOFXBankID(self, s: str) -> None: ...
    
    def setOFXBillPayAccountNumber(self, s: str) -> None: ...
    
    def setOFXBillPayAccountType(self, s: str) -> None: ...
    
    def setOFXBillPayBankID(self, s: str) -> None: ...
    
    def setOFXBranchID(self, s: str) -> None: ...
    
    def setOFXBrokerID(self, s: str) -> None: ...
    
    def setOnlinePayees(self, onlinePayeeList: 'OnlinePayeeList') -> None: ...
    
    def setOnlinePayments(self, onlinePaymentList: 'OnlinePaymentList') -> None: ...
    
    def setOptionPrice(self, f: float) -> None: ...
    
    def setParentAccount(self, account: 'Account') -> None: ...
    
    def setPaymentsPerYear(self, i: int) -> None: ...
    
    def setPermanentAPR(self, f: float) -> None: ...
    
    def setPoints(self, f: float) -> None: ...
    
    def setPreferredSortAscending(self, b: bool) -> None: ...
    
    def setPreferredSortOrder(self, i: int) -> None: ...
    
    def setPreferredTwoLines(self, b: bool) -> None: ...
    
    def setPut(self, b: bool) -> None: ...
    
    def setRateChangeDate(self, i: int) -> None: ...
    
    def setReminder(self, b: bool) -> None: ...
    
    def setSecuritySubType(self, s: str) -> None: ...
    
    def setSecurityType(self, securityType: 'SecurityType') -> None: ...
    
    def setStartBalance(self, i: int) -> None: ...
    
    def setStrikePrice(self, i: int) -> None: ...
    
    def setTaxCategory(self, s: str) -> None: ...
    
    def setTaxRelated(self, b: bool) -> None: ...
    
    def setTaxable(self, b: bool) -> None: ...
    
    def setUsesAverageCost(self, b: bool) -> None: ...
    
    def shouldBeIncludedInNetWorth(self) -> bool: ...
    
    def sortAccounts(self) -> None: ...
    
    def toString(self) -> str: ...
    
    
    class AccountType:
        ASSET = 'ASSET'
        BANK = 'BANK'
        CREDIT_CARD = 'CREDIT_CARD'
        EXPENSE = 'EXPENSE'
        INCOME = 'INCOME'
        INVESTMENT = 'INVESTMENT'
        LIABILITY = 'LIABILITY'
        LOAN = 'LOAN'
        ROOT = 'ROOT'
        SECURITY = 'SECURITY'
        
        def __init__(self): ...
        
        def code(self) -> int: ...
        
        def compareCodeTo(self, s: str) -> int: ...
        
        def filter(self) -> 'AcctFilter': ...
        
        def syncID(self) -> str: ...
        
        @staticmethod
        def typeForCode(i: int) -> str: ...
        
        @staticmethod
        def typeForSyncID(s: str) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    class BalanceType:
        CLEARED = 'CLEARED'
        CONFIRMED = 'CONFIRMED'
        CURRENT = 'CURRENT'
        NORMAL = 'NORMAL'
        UNCONFIRMED = 'UNCONFIRMED'
        
        def __init__(self): ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    class DebtPaymentSpec:
        CLEARED_BALANCE = 'CLEARED_BALANCE'
        CURRENT_BALANCE = 'CURRENT_BALANCE'
        FIXED = 'FIXED'
        PERCENTAGE_OF_CLEARED_BALANCE = 'PERCENTAGE_OF_CLEARED_BALANCE'
        PERCENTAGE_OF_CURRENT_BALANCE = 'PERCENTAGE_OF_CURRENT_BALANCE'
        
        def __init__(self): ...
        
        def getIDString(self) -> str: ...
        
        @staticmethod
        def valueForString(s: str) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    
class AccountBook:
    DROPBOX_SYNC_UUID = u'netsync.dropbox.fileid'
    
    def __init__(self): ...
    
    @staticmethod
    def accountBookForFolder(j: 'java.io.File') -> 'AccountBook': ...
    
    def addAccountListener(self, accountListener: 'AccountListener') -> None: ...
    
    def addFileListener(self, mDFileListener: 'MDFileListener') -> None: ...
    
    def addListener(self, accountBookListener: 'AccountBookListener') -> None: ...
    
    def cleanUp(self) -> None: ...
    
    def cleanupDeletedAttachments(self) -> None: ...
    
    def doInitialLoad(self, b: bool) -> None: ...
    
    def equals(self, o: object) -> bool: ...
    
    @staticmethod
    def fakeAccountBook() -> 'AccountBook': ...
    
    def getAccountByNum(self, i: int) -> Account: ...
    
    def getAccountByUUID(self, s: str) -> Account: ...
    
    def getAccountByUUIDOrLegacyNumber(self, s: str) -> Account: ...
    
    def getAddresses(self) -> 'AddressBook': ...
    
    def getAttachmentsFolder(self) -> str: ...
    
    @staticmethod
    def getBookFileForName(j: 'java.io.File', s: str) -> 'java.io.File': ...
    
    def getBudgets(self) -> 'BudgetList': ...
    
    def getCheckpointFiles(self) -> List['java.io.File']: ...
    
    def getCheckpointsFolder(self) -> 'java.io.File': ...
    
    def getCurrencies(self) -> 'CurrencyTable': ...
    
    def getCurrencyByUUID(self, s: str) -> 'CurrencyType': ...
    
    def getEncryptedTemporaryFolder(self) -> 'java.io.File': ...
    
    def getFileUUID(self) -> str: ...
    
    def getItemForID(self, s: str) -> MoneydanceSyncableItem: ...
    
    def getItemsWithType(self, s: str) -> List[com.infinitekind.tiksync.SyncableItem]: ...
    
    def getLastModified(self) -> int: ...
    
    def getLocalStorage(self) -> 'LocalStorage': ...
    
    def getMemorizedItems(self) -> 'ReportSpecManager': ...
    
    def getName(self) -> str: ...
    
    def getOnlineInfo(self) -> 'OnlineInfo': ...
    
    def getPublicMetaData(self) -> com.infinitekind.util.StreamTable: ...
    
    def getRecalcBalances(self) -> bool: ...
    
    def getReminders(self) -> 'ReminderSet': ...
    
    def getRootAccount(self) -> Account: ...
    
    def getRootAccountFile(self) -> str: ...
    
    def getRootFolder(self) -> 'java.io.File': ...
    
    def getSyncer(self) -> com.infinitekind.tiksync.Syncer: ...
    
    def getTemporaryFolder(self) -> 'java.io.File': ...
    
    def getTransactionSet(self) -> 'TransactionSet': ...
    
    def getUndoManager(self) -> 'UndoManagerInterface': ...
    
    @staticmethod
    def getUnusedFileNameWithBase(j: 'java.io.File', s: str) -> 'java.io.File': ...
    
    @staticmethod
    def getUnusedFriendlyFileInBase(j: 'java.io.File') -> 'java.io.File': ...
    
    def hasCompletedInitialSync(self) -> bool: ...
    
    def hasLoggedChanges(self) -> bool: ...
    
    def initializeAccounts(self, account: Account) -> None: ...
    
    def initializeNewEmptyAccounts(self, s: str) -> None: ...
    
    def isValid(self) -> bool: ...
    
    @staticmethod
    def isValidBookFile(s: str) -> bool: ...
    
    @staticmethod
    def isValidBookName(j: 'java.io.File', s: str) -> bool: ...
    
    def logModifiedItem(self, moneydanceSyncableItem: MoneydanceSyncableItem) -> bool: ...
    
    def logModifiedItems(self, list: List[MoneydanceSyncableItem]) -> bool: ...
    
    def logRemovedItem(self, moneydanceSyncableItem: MoneydanceSyncableItem) -> bool: ...
    
    def logRemovedItems(self, list: List[MoneydanceSyncableItem]) -> bool: ...
    
    def moveToFolder(self, j: 'java.io.File') -> None: ...
    
    def notifyAccountModified(self, account: Account) -> None: ...
    
    def pauseSyncing(self) -> None: ...
    
    def performPostLoadVerification(self) -> None: ...
    
    def refreshAccountBalances(self) -> bool: ...
    
    def refreshAccountBalancesAsync(self) -> None: ...
    
    def registerAttachmentForDeletion(self, s: str) -> None: ...
    
    def registerNewItemWithoutSyncing(self, c: com.infinitekind.tiksync.SyncableItem) -> None: ...
    
    def removeAccountListener(self, accountListener: 'AccountListener') -> None: ...
    
    def removeFileListener(self, mDFileListener: 'MDFileListener') -> None: ...
    
    def removeListener(self, accountBookListener: 'AccountBookListener') -> None: ...
    
    def resetLoggedChanges(self) -> None: ...
    
    def resumeSyncing(self) -> None: ...
    
    def save(self) -> bool: ...
    
    def saveTrunkFile(self) -> None: ...
    
    def scheduleQueuePurgeInMillisecondsFromNow(self, i: int) -> None: ...
    
    def setFinishedInitialLoad(self, b: bool) -> None: ...
    
    def setLocalStorage(self, localStorage: 'LocalStorage') -> None: ...
    
    def setPublicMetaData(self, c: com.infinitekind.util.StreamTable) -> None: ...
    
    def setRecalcBalances(self, b: bool) -> None: ...
    
    def setUndoManager(self, undoManagerInterface: 'UndoManagerInterface') -> None: ...
    
    def startSyncing(self, c: com.infinitekind.tiksync.SyncFolder, c2: com.infinitekind.tiksync.SyncDelegate, b: bool) -> None: ...
    
    def stopSyncing(self) -> None: ...
    
    @staticmethod
    def stripNonFilenameSafeCharacters(s: str) -> str: ...
    
    def toString(self) -> str: ...
    
    def unregisterAttachmentForDeletion(self, s: str) -> None: ...
    
    
class AccountBookListener:
    def __init__(self): ...
    
    def accountBookDataReplaced(self, accountBook: AccountBook) -> None: ...
    
    def accountBookDataUpdated(self, accountBook: AccountBook) -> None: ...
    
    def balancesHaveChanged(self, accountBook: AccountBook) -> None: ...
    
    def syncingBegan(self, accountBook: AccountBook) -> None: ...
    
    def syncingFinished(self, accountBook: AccountBook, b: bool, s: str) -> None: ...
    
    
class AccountIterator(Iterator):
    def __init__(self, account: Account): ...
    
    def hasNext(self) -> bool: ...
    
    def next(self) -> object: ...
    
    def remove(self) -> None: ...
    
    
class AccountListener:
    def __init__(self): ...
    
    def accountAdded(self, account: Account, account2: Account) -> None: ...
    
    def accountBalanceChanged(self, account: Account) -> None: ...
    
    def accountDeleted(self, account: Account, account2: Account) -> None: ...
    
    def accountModified(self, account: Account) -> None: ...
    
    
class AccountUtil:
    ACCOUNT = 5
    ACCOUNT_NAME = 17
    ACCOUNT_NAME_COMPARATOR = 'com.infinitekind.moneydance.model.AccountUtil$1@2bda64cd'
    ACCOUNT_TYPE_NAME_COMPARATOR = 'com.infinitekind.moneydance.model.AccountUtil$$Lambda$244/0x0000000800307510@391b67'
    ACTION = 10
    AMOUNT = 3
    AMOUNT_COMPARATOR = 'com.infinitekind.moneydance.model.AccountUtil$3@321d3964'
    CATEGORY = 13
    CATEGORY_NAME = 18
    CHECKNUM = 9
    CHECKNUM_INT = 11
    CHECKNUM_PARENT = 16
    DATE = 0
    DATE_ENTERED = 1
    DATE_ENTERED_COMPARATOR = 'com.infinitekind.moneydance.model.AccountUtil$2@3dd81ea7'
    DATE_THEN_AMOUNT = 7
    DATE_THEN_AMOUNT_COMPARATOR = 'com.infinitekind.moneydance.model.AccountUtil$4@455cf9dd'
    DATE_THEN_CHECKNUM = 8
    DATE_THEN_STATUS = 6
    DESCRIPTION = 2
    NOT_CATEGORY = 14
    STATUS_THEN_CKNUM = 12
    STATUS_THEN_DATE = 4
    TAXDATE_THEN_CHECKNUM = 15
    TXN_CATEGORY_THEN_DATE_ENTERED = 'com.infinitekind.moneydance.model.AccountUtil$5@d762032'
    TXN_DATE_THEN_CHECKNUM = 'com.infinitekind.moneydance.model.AccountUtil$6@567beee1'
    TXN_DESCRIPTION = 'com.infinitekind.moneydance.model.AccountUtil$8@2b2bffaf'
    TXN_TAXDATE_THEN_CHECKNUM = 'com.infinitekind.moneydance.model.AccountUtil$7@99b6906'
    
    def __init__(self): ...
    
    @staticmethod
    def allMatchesForSearch(account: Account, acctFilter: 'AcctFilter') -> List[Account]: ...
    
    @staticmethod
    def compAccountDateAmount(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compAccountDateEntered(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compAmount(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compCategoryDateAmount(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compCategoryDateEntered(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compCategoryOrAccount(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compCheckIntId(abstractTxn: AbstractTxn, abstractTxn2: AbstractTxn) -> int: ...
    
    @staticmethod
    def compCheckNumAmt(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compCheckNumBoth(abstractTxn: AbstractTxn, abstractTxn2: AbstractTxn) -> int: ...
    
    @staticmethod
    def compCheckNumId(abstractTxn: AbstractTxn, abstractTxn2: AbstractTxn) -> int: ...
    
    @staticmethod
    def compCheckNumParent(abstractTxn: AbstractTxn, abstractTxn2: AbstractTxn) -> int: ...
    
    @staticmethod
    def compDate(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compDateCheckNum(txn: Txn, txn2: Txn, b: bool) -> int: ...
    
    @staticmethod
    def compDateDateEntered(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compDateEntered(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compDateThenAmount(abstractTxn: AbstractTxn, abstractTxn2: AbstractTxn) -> int: ...
    
    @staticmethod
    def compDateThenAmountTxn(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compDateThenStatus(abstractTxn: AbstractTxn, abstractTxn2: AbstractTxn) -> int: ...
    
    @staticmethod
    def compDescription(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compDescriptionDate(abstractTxn: AbstractTxn, abstractTxn2: AbstractTxn) -> int: ...
    
    @staticmethod
    def compDescriptionDateEntered(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compStatus(abstractTxn: AbstractTxn, abstractTxn2: AbstractTxn) -> int: ...
    
    @staticmethod
    def compStatusChecknum(abstractTxn: AbstractTxn, abstractTxn2: AbstractTxn) -> int: ...
    
    @staticmethod
    def compTaxDate(txn: Txn, txn2: Txn) -> int: ...
    
    @staticmethod
    def compareAccountNames(account: Account, account2: Account) -> int: ...
    
    @staticmethod
    def findAccountWithID(account: Account, s: str) -> Account: ...
    
    @staticmethod
    def findAllReferencesToAccount(list: List[MoneydanceSyncableItem], account: Account) -> None: ...
    
    @staticmethod
    def firstMatchForSearch(account: Account, acctFilter: 'AcctFilter') -> Account: ...
    
    @staticmethod
    def getAccountIterator(account: Account) -> Iterator[Account]: ...
    
    @staticmethod
    def getBalanceAsOfDate(accountBook: AccountBook, account: Account, i: int) -> int: ...
    
    @staticmethod
    def getBalancesAsOfDates(accountBook: AccountBook, account: Account, list: List[int]) -> List[int]: ...
    
    @staticmethod
    def getCategoryFromTxn(abstractTxn: AbstractTxn) -> Account: ...
    
    @staticmethod
    def getDefaultCategoryForAcct(account: Account) -> Account: ...
    
    @staticmethod
    def getDefaultTransferAcct(account: Account) -> Account: ...
    
    @staticmethod
    def getFilterForType(s: str) -> 'AcctFilter': ...
    
    @staticmethod
    def getNonCategoryFromTxn(abstractTxn: AbstractTxn) -> Account: ...
    
    @staticmethod
    def insertSortedTransaction(txnSet: 'TxnSet', abstractTxn: AbstractTxn, i: int) -> int: ...
    
    @staticmethod
    def isCompatibleWith(onlineAccountInfo: 'OnlineAccountInfo', account: Account) -> bool: ...
    
    @staticmethod
    def isTransactionSorted(i: int, abstractTxn: AbstractTxn, txnSet: 'TxnSet', i2: int) -> bool: ...
    
    @staticmethod
    def sortTransactions(txnSet: 'TxnSet', i: int) -> None: ...
    
    @staticmethod
    def sumBalancesByCurrency(accountBook: AccountBook, acctFilter: 'AcctFilter') -> Dict['CurrencyType',int]: ...
    
    
class AcctFilter:
    ACTIVE_ACCOUNTS_FILTER = 'com.infinitekind.moneydance.model.AcctFilter$2@229adaad'
    ACTIVE_CATEGORY_CHOICE_FILTER = 'com.infinitekind.moneydance.model.AcctFilter$9@552c78d3'
    ALL_ACCOUNTS_FILTER = 'com.infinitekind.moneydance.model.AcctFilter$7@76fb6d24'
    CATEGORY_CHOICE_FILTER = 'com.infinitekind.moneydance.model.AcctFilter$8@49f516eb'
    CATEGORY_FILTER = 'com.infinitekind.moneydance.model.AcctFilter$6@3dcee2ca'
    EDITABLE_ACCOUNTS_FILTER = 'com.infinitekind.moneydance.model.AcctFilter$5@b12ef40'
    INACTIVE_ACCOUNTS_FILTER = 'com.infinitekind.moneydance.model.AcctFilter$3@26ad314b'
    NON_CATEGORY_FILTER = 'com.infinitekind.moneydance.model.AcctFilter$1@470e393b'
    VIEWABLE_ACCOUNTS_FILTER = 'com.infinitekind.moneydance.model.AcctFilter$4@d9c4ba2'
    
    def __init__(self): ...
    
    def format(self, account: Account) -> str: ...
    
    def matches(self, account: Account) -> bool: ...
    
    
class AddressBook:
    comparator = 'com.infinitekind.moneydance.model.AddressBook$1@7df3b5c'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def addEntry(self, addressBookEntry: 'AddressBookEntry') -> None: ...
    
    def getAllEntries(self) -> List['AddressBookEntry']: ...
    
    def getEntryWithID(self, i: int) -> 'AddressBookEntry': ...
    
    def loadFromLegacyData(self) -> None: ...
    
    def removeEntry(self, addressBookEntry: 'AddressBookEntry') -> None: ...
    
    
class AddressBookEntry(MoneydanceSyncableItem):
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'contact'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def getAddressString(self) -> str: ...
    
    def getEmailAddress(self) -> str: ...
    
    def getID(self) -> int: ...
    
    def getName(self) -> str: ...
    
    def getPhoneNumber(self) -> str: ...
    
    def getSyncItemType(self) -> str: ...
    
    def isEqualTo(self, addressBookEntry: 'AddressBookEntry') -> bool: ...
    
    def setAddressString(self, s: str) -> None: ...
    
    def setEmailAddress(self, s: str) -> None: ...
    
    def setName(self, s: str) -> None: ...
    
    def setPhoneNumber(self, s: str) -> None: ...
    
    def toString(self) -> str: ...
    
    
class TxnSearch:
    def __init__(self): ...
    
    def matches(self, txn: Txn) -> bool: ...
    
    def matchesAll(self) -> bool: ...
    
    
class AggregateTxnSearch(TxnSearch):
    def __init__(self): ...
    
    def addCriteria(self, txnSearch: TxnSearch) -> None: ...
    
    def matches(self, txn: Txn) -> bool: ...
    
    def matchesAll(self) -> bool: ...
    
    def setGrouping(self, s: str) -> None: ...
    
    
    class GroupingType:
        INTERSECTION = 'INTERSECTION'
        UNION = 'UNION'
        
        def __init__(self): ...
        
        @staticmethod
        def fromInt(i: int, s: str) -> str: ...
        
        def intValue(self) -> int: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    
class AvailableSharesTracker:
    def __init__(self, i: int, i2: int): ...
    
    def allot(self, i: int) -> None: ...
    
    def getAvailableShares(self) -> int: ...
    
    def getLastDateInt(self) -> int: ...
    
    def toString(self) -> str: ...
    
    def updateDate(self, currencyType: 'CurrencyType', i: int) -> None: ...
    
    
class Budget(MoneydanceSyncableItem):
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'bdgt'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def addBudgetListener(self, budgetListener: 'BudgetListener') -> None: ...
    
    def calculate(self, list: List['DateRange'], b: bool, b2: bool) -> str: ...
    
    def containsDate(self, i: int) -> bool: ...
    
    def createItem(self) -> 'BudgetItem': ...
    
    def deleteItem(self) -> bool: ...
    
    def duplicateAsNew(self, s: str) -> 'Budget': ...
    
    def getAllItems(self) -> List['BudgetItem']: ...
    
    def getBudgetList(self) -> 'BudgetList': ...
    
    @staticmethod
    def getIntervalIdx(list: List['DateRange'], i: int) -> int: ...
    
    def getItemList(self) -> 'BudgetItemList': ...
    
    def getKey(self) -> str: ...
    
    def getName(self) -> str: ...
    
    def getPeriodType(self) -> 'PeriodType': ...
    
    def getSyncItemType(self) -> str: ...
    
    def isModified(self) -> bool: ...
    
    def isNewStyle(self) -> bool: ...
    
    def removeBudgetListener(self, budgetListener: 'BudgetListener') -> None: ...
    
    def setBudgetInfo(self, budget: 'Budget') -> None: ...
    
    def setModified(self) -> None: ...
    
    def setName(self, s: str) -> None: ...
    
    def setPeriodType(self, periodType: 'PeriodType') -> None: ...
    
    def toString(self) -> str: ...
    
    
    class CalculationResults:
        def __init__(self, i: int): ...
        
        def addItem(self, budgetItemDetail: 'BudgetItemDetail') -> None: ...
        
        def addToActualExpense(self, i: int, i2: int) -> None: ...
        
        def addToActualIncome(self, i: int, i2: int) -> None: ...
        
        def addToBudgetedExpense(self, i: int, i2: int) -> None: ...
        
        def addToBudgetedIncome(self, i: int, i2: int) -> None: ...
        
        def getActualExpenses(self, i: int) -> int: ...
        
        def getActualExpensesList(self) -> List[int]: ...
        
        def getActualIncome(self, i: int) -> int: ...
        
        def getActualIncomeList(self) -> List[int]: ...
        
        def getBudgetedExpenses(self, i: int) -> int: ...
        
        def getBudgetedExpensesList(self) -> List[int]: ...
        
        def getBudgetedIncome(self, i: int) -> int: ...
        
        def getBudgetedIncomeList(self) -> List[int]: ...
        
        def getItemList(self) -> List['BudgetItemDetail']: ...
        
        def getMaxValue(self, i: int) -> int: ...
        
        def resetItems(self) -> None: ...
        
        def sortItems(self) -> None: ...
        
        
    
class BudgetItem(MoneydanceSyncableItem, 'java.lang.Comparable'):
    INDEFINITE_END_DATE = 30000000
    INTERVAL_ANNUALLY = 10
    INTERVAL_BI_MONTHLY = 7
    INTERVAL_BI_WEEKLY = 3
    INTERVAL_DAILY = 1
    INTERVAL_MONTHLY = 6
    INTERVAL_NO_REPEAT = 0
    INTERVAL_ONCE_ANNUALLY = 60
    INTERVAL_ONCE_BI_MONTHLY = 57
    INTERVAL_ONCE_BI_WEEKLY = 53
    INTERVAL_ONCE_MONTHLY = 56
    INTERVAL_ONCE_SEMI_ANNUALLY = 59
    INTERVAL_ONCE_SEMI_MONTHLY = 55
    INTERVAL_ONCE_TRI_MONTHLY = 58
    INTERVAL_ONCE_TRI_WEEKLY = 54
    INTERVAL_ONCE_WEEKLY = 52
    INTERVAL_SEMI_ANNUALLY = 9
    INTERVAL_SEMI_MONTHLY = 5
    INTERVAL_TRI_MONTHLY = 8
    INTERVAL_TRI_WEEKLY = 4
    INTERVAL_WEEKLY = 2
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'bdgtitem'
    
    def __init__(self): ...
    
    def compareTo(self, o: object) -> int: ...
    
    def containsDate(self, i: int) -> bool: ...
    
    def duplicateAsNew(self, budget: Budget) -> 'BudgetItem': ...
    
    def getAccount(self) -> Account: ...
    
    def getAmount(self) -> int: ...
    
    def getAmountRelativeToPeriod(self, budgetPeriod: 'BudgetPeriod') -> int: ...
    
    def getBudget(self) -> Budget: ...
    
    def getBudgetImpact(self, abstractTxn: AbstractTxn) -> int: ...
    
    def getCurrency(self) -> 'CurrencyType': ...
    
    def getDateRange(self) -> 'DateRange': ...
    
    def getInterval(self) -> int: ...
    
    def getIntervalEnd(self, i: int) -> int: ...
    
    def getIntervalEndDate(self) -> int: ...
    
    def getIntervalProration(self, i: int) -> float: ...
    
    def getIntervalStart(self, i: int) -> int: ...
    
    def getIntervalStartDate(self) -> int: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getTransferAccount(self) -> Account: ...
    
    def isIncome(self) -> bool: ...
    
    def setAccount(self, account: Account) -> None: ...
    
    def setAmount(self, i: int) -> None: ...
    
    def setBudget(self, budget: Budget) -> None: ...
    
    def setBudgetPeriod(self, budgetPeriod: 'BudgetPeriod') -> None: ...
    
    def setInterval(self, i: int) -> None: ...
    
    def setIntervalEndDate(self, i: int) -> None: ...
    
    def setIntervalStartDate(self, i: int) -> None: ...
    
    def setTransferAccount(self, account: Account) -> None: ...
    
    def toString(self) -> str: ...
    
    
class BudgetItemDetail('java.lang.Comparable'):
    def __init__(self, i: int, account: Account): ...
    
    def addBudgetItem(self, budgetItem: BudgetItem) -> None: ...
    
    def addRawAmount(self, i: int, i2: int) -> None: ...
    
    def addToActual(self, i: int, i2: int) -> None: ...
    
    def addToBudgeted(self, i: int, i2: int) -> None: ...
    
    def compareTo(self, budgetItemDetail: 'BudgetItemDetail') -> int: ...
    
    def getActual(self, i: int) -> int: ...
    
    def getActualAmounts(self) -> List[int]: ...
    
    def getBudgetItems(self) -> List[BudgetItem]: ...
    
    def getBudgeted(self, i: int) -> int: ...
    
    def getBudgetedAmounts(self) -> List[int]: ...
    
    def getCategory(self) -> Account: ...
    
    def getDiff(self, i: int) -> int: ...
    
    def getItemCurrency(self) -> 'CurrencyType': ...
    
    def getRawAmount(self, i: int) -> int: ...
    
    def hasNoData(self) -> bool: ...
    
    def isIncome(self) -> bool: ...
    
    def toString(self) -> str: ...
    
    
class BudgetItemList(Iterable):
    def __init__(self, budget: Budget): ...
    
    def createItem(self) -> BudgetItem: ...
    
    def getActualAmount(self, account: Account, budgetPeriod: 'BudgetPeriod') -> int: ...
    
    def getActualAmountForAllCategoriesInPeriod(self, budgetPeriod: 'BudgetPeriod', currencyType: 'CurrencyType', s: str) -> int: ...
    
    def getBudget(self) -> Budget: ...
    
    def getBudgetItemForCategory(self, account: Account, budgetPeriod: 'BudgetPeriod') -> BudgetItem: ...
    
    def getBudgetItemsForAccountAndInterval(self, account: Account, i: int) -> List[BudgetItem]: ...
    
    def getBudgetItemsForAccountInRange(self, account: Account, dateRange: 'DateRange', list: List[BudgetItem]) -> List[BudgetItem]: ...
    
    def getBudgetedAmount(self, account: Account, budgetPeriod: 'BudgetPeriod') -> int: ...
    
    def getBudgetedAmountForAllCategoriesInPeriod(self, budgetPeriod: 'BudgetPeriod', s: str) -> int: ...
    
    def getItem(self, i: int) -> BudgetItem: ...
    
    def getItemCount(self) -> int: ...
    
    def indexOf(self, budgetItem: BudgetItem) -> int: ...
    
    def iterator(self) -> Iterator[BudgetItem]: ...
    
    @staticmethod
    def makeEditableList(budget: Budget) -> 'BudgetItemList': ...
    
    def makeEditingCopy(self) -> 'BudgetItemList': ...
    
    def reload(self) -> None: ...
    
    def removeItem(self, budgetItem: BudgetItem) -> bool: ...
    
    def saveEdits(self) -> None: ...
    
    def setBudgetedAmount(self, account: Account, i: int, budgetPeriod: 'BudgetPeriod') -> None: ...
    
    def sortItems(self) -> None: ...
    
    def toArray(self) -> List[BudgetItem]: ...
    
    
class BudgetList:
    BUDGET_CLASS_DISCRETIONARY = u'd'
    BUDGET_CLASS_INCOME = u'i'
    BUDGET_CLASS_MISC = u'm'
    BUDGET_CLASS_REQUIRED = u'r'
    BUDGET_INTERVAL_MONTHLY = u'm'
    BUDGET_INTERVAL_QUARTERLY = u'q'
    BUDGET_INTERVAL_WEEKLY = u'w'
    BUDGET_INTERVAL_YEARLY = u'y'
    
    def __init__(self): ...
    
    def addBudget(self, budget: Budget) -> None: ...
    
    def addListener(self, budgetListener: 'BudgetListener') -> None: ...
    
    def containsBudgetWithName(self, s: str) -> bool: ...
    
    def findCurrentBudget(self) -> Budget: ...
    
    def getAllBudgets(self) -> List[Budget]: ...
    
    def getBudgetWithID(self, s: str) -> Budget: ...
    
    def getBudgetWithKey(self, s: str) -> Budget: ...
    
    def loadFromLegacyStorage(self) -> None: ...
    
    def removeBudget(self, budget: Budget) -> bool: ...
    
    def removeListener(self, budgetListener: 'BudgetListener') -> None: ...
    
    
class BudgetListener:
    def __init__(self): ...
    
    def budgetAdded(self, budget: Budget) -> None: ...
    
    def budgetListModified(self, budgetList: BudgetList) -> None: ...
    
    def budgetModified(self, budget: Budget) -> None: ...
    
    def budgetRemoved(self, budget: Budget) -> None: ...
    
    
class BudgetPeriod:
    def __init__(self, i: int, periodType: 'PeriodType'): ...
    
    def contains(self, budgetItem: BudgetItem) -> bool: ...
    
    @staticmethod
    def getBudgetIntervalForPeriodType(periodType: 'PeriodType') -> int: ...
    
    def getDateRange(self) -> 'DateRange': ...
    
    def getDescription(self) -> str: ...
    
    def getEndDate(self) -> int: ...
    
    def getNextBudgetPeriod(self) -> 'BudgetPeriod': ...
    
    def getPeriodType(self) -> 'PeriodType': ...
    
    @staticmethod
    def getPeriodTypeForBudgetInterval(i: int) -> 'PeriodType': ...
    
    def getPreviousBudgetPeriod(self) -> 'BudgetPeriod': ...
    
    def getStartDate(self) -> int: ...
    
    def overlap(self, budgetItem: BudgetItem) -> bool: ...
    
    def setPeriodType(self, periodType: 'PeriodType') -> None: ...
    
    def setStartDate(self, i: int) -> None: ...
    
    def toString(self) -> str: ...
    
    
class CapitalGainBuy('java.lang.Comparable'):
    def __init__(self, account: Account, i: int, i2: int, i3: int): ...
    
    def allot(self, i: int, i2: int) -> int: ...
    
    def compareTo(self, capitalGainBuy: 'CapitalGainBuy') -> int: ...
    
    def getDateInt(self) -> int: ...
    
    def getRemainingBasis(self) -> int: ...
    
    def getRemainingShares(self, i: int) -> int: ...
    
    def getSharesPurchased(self) -> int: ...
    
    def getTotalAmount(self) -> int: ...
    
    def isAllocated(self) -> bool: ...
    
    def setRemainingBasis(self, f: float, i: int) -> None: ...
    
    def toString(self) -> str: ...
    
    
class CapitalGainResult:
    def __init__(self, s: str): ...
    
    def getBasis(self) -> int: ...
    
    def getErrorMessageKey(self) -> str: ...
    
    def getLongTermAvailableShares(self) -> int: ...
    
    def getLongTermBasis(self) -> int: ...
    
    def getLongTermShares(self) -> int: ...
    
    def getShortTermAvailableShares(self) -> int: ...
    
    def getShortTermBasis(self) -> int: ...
    
    def getShortTermShares(self) -> int: ...
    
    def isValid(self) -> bool: ...
    
    def toString(self) -> str: ...
    
    
class CheckNumSettings:
    def __init__(self): ...
    
    def getIncludeNextCheckNumber(self) -> bool: ...
    
    def getIncludePrintCheckMarker(self) -> bool: ...
    
    def getMaximumRecents(self) -> int: ...
    
    def getPopupStrings(self) -> List[str]: ...
    
    def getRecentsOption(self) -> str: ...
    
    def setIncludeNextCheckNumber(self, b: bool) -> None: ...
    
    def setIncludePrintCheckMarker(self, b: bool) -> None: ...
    
    def setMaximumRecents(self, i: int) -> None: ...
    
    def setPopupStrings(self, list: List[str]) -> None: ...
    
    def setRecentsOption(self, s: str) -> None: ...
    
    
    class IncludeRecentsOption:
        ACCOUNT = 'ACCOUNT'
        GLOBAL = 'GLOBAL'
        NONE = 'NONE'
        
        def __init__(self): ...
        
        @staticmethod
        def fromString(s: str) -> str: ...
        
        def stringValue(self) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    
class CompoundingType('java.lang.Enum'):
    ANNUALLY = 'ANNUALLY'
    CONFIG_KEY = u'compounding'
    DAILY = 'DAILY'
    DEFAULT = 'DAILY'
    MONTHLY = 'MONTHLY'
    QUARTERLY = 'QUARTERLY'
    WEEKLY = 'WEEKLY'
    
    def __init__(self): ...
    
    @staticmethod
    def fromInt(i: int) -> 'CompoundingType': ...
    
    def getResourceKey(self) -> str: ...
    
    @staticmethod
    def valueOf(s: str) -> 'CompoundingType': ...
    
    @staticmethod
    def values() -> List['CompoundingType']: ...
    
    
class CurrencyListener:
    def __init__(self): ...
    
    def currencyTableModified(self, currencyTable: 'CurrencyTable') -> None: ...
    
    
class CurrencySearch:
    def __init__(self): ...
    
    def format(self, currencyType: 'CurrencyType') -> str: ...
    
    def matches(self, currencyType: 'CurrencyType') -> bool: ...
    
    def setType(self, s: str) -> None: ...
    
    
class CurrencySnapshot(MoneydanceSyncableItem):
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'csnap'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def getBaseRate(self) -> float: ...
    
    def getDailyHigh(self) -> float: ...
    
    def getDailyLow(self) -> float: ...
    
    def getDailyVolume(self) -> int: ...
    
    def getDate(self) -> int: ...
    
    def getDateInt(self) -> int: ...
    
    def getRate(self) -> float: ...
    
    def getRawRate(self) -> float: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getUserDailyHigh(self) -> float: ...
    
    def getUserDailyLow(self) -> float: ...
    
    def getUserRate(self) -> float: ...
    
    def itemWasUpdated(self) -> None: ...
    
    def setBaseRate(self, f: float) -> None: ...
    
    def setDailyHigh(self, f: float) -> None: ...
    
    def setDailyLow(self, f: float) -> None: ...
    
    def setDailyVolume(self, i: int) -> None: ...
    
    def setDate(self, i: int) -> None: ...
    
    def setDateInt(self, i: int) -> None: ...
    
    def setRate(self, f: float) -> None: ...
    
    def setRawRate(self, f: float) -> None: ...
    
    def setUserDailyHigh(self, f: float) -> None: ...
    
    def setUserDailyLow(self, f: float) -> None: ...
    
    def setUserRate(self, f: float) -> None: ...
    
    def toString(self) -> str: ...
    
    
class CurrencySplit(MoneydanceSyncableItem):
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'csplit'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def getDate(self) -> int: ...
    
    def getDateInt(self) -> int: ...
    
    def getNewShares(self) -> int: ...
    
    def getOldShares(self) -> int: ...
    
    def getSplitRatio(self) -> float: ...
    
    def getSyncItemType(self) -> str: ...
    
    def itemWasUpdated(self) -> None: ...
    
    @staticmethod
    def makeSplit(accountBook: AccountBook, currencyType: 'CurrencyType', i: int, f: float, i2: int, i3: int) -> 'CurrencySplit': ...
    
    def setDate(self, i: int) -> None: ...
    
    def setDateInt(self, i: int) -> None: ...
    
    def setNewShares(self, i: int) -> None: ...
    
    def setOldShares(self, i: int) -> None: ...
    
    def setSplitRatio(self, f: float) -> None: ...
    
    def toString(self) -> str: ...
    
    
class CurrencyTable(Iterable):
    def __init__(self, accountBook: AccountBook): ...
    
    def addCurrencyListener(self, currencyListener: CurrencyListener) -> None: ...
    
    def addCurrencyType(self, currencyType: 'CurrencyType') -> None: ...
    
    def contains(self, currencyType: 'CurrencyType') -> bool: ...
    
    @staticmethod
    def convertValue(i: int, currencyType: 'CurrencyType', currencyType2: 'CurrencyType') -> int: ...
    
    def convertValueXXX(self, i: int, currencyType: 'CurrencyType', currencyType2: 'CurrencyType') -> int: ...
    
    def dumpCurrencies(self) -> None: ...
    
    def fireCurrencyTableModified(self) -> None: ...
    
    def getAllCurrencies(self) -> List['CurrencyType']: ...
    
    def getBaseType(self) -> 'CurrencyType': ...
    
    def getBook(self) -> AccountBook: ...
    
    def getCurrencyByID(self, i: int) -> 'CurrencyType': ...
    
    def getCurrencyByIDString(self, s: str) -> 'CurrencyType': ...
    
    def getCurrencyByName(self, s: str) -> 'CurrencyType': ...
    
    def getCurrencyByTickerSymbol(self, s: str) -> 'CurrencyType': ...
    
    def getCurrencyByUUID(self, s: str) -> 'CurrencyType': ...
    
    def getCurrencyCount(self) -> int: ...
    
    def getFallbackCurrency(self) -> 'CurrencyType': ...
    
    @staticmethod
    def getRawRate(currencyType: 'CurrencyType', currencyType2: 'CurrencyType', f: float) -> float: ...
    
    def getRelativePriceInt(self, currencyType: 'CurrencyType', currencyType2: 'CurrencyType', i: int) -> float: ...
    
    def getUniqueCurrId(self, s: str) -> str: ...
    
    @staticmethod
    def getUserRate(currencyType: 'CurrencyType', currencyType2: 'CurrencyType') -> float: ...
    
    def isDirty(self) -> bool: ...
    
    def iterator(self) -> Iterator['CurrencyType']: ...
    
    def removeCurrencyListener(self, currencyListener: CurrencyListener) -> None: ...
    
    def resetDirtyFlags(self) -> None: ...
    
    def setBaseType(self, currencyType: 'CurrencyType') -> None: ...
    
    def setFireNotifications(self, b: bool) -> None: ...
    
    
class CurrencyType(MoneydanceSyncableItem):
    CURRTYPE_CURRENCY = 0
    CURRTYPE_SECURITY = 1
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'curr'
    TAG_RELATIVE_CURR_UUID = u'rel_curr_id'
    TAG_RELATIVE_TO_CURR = u'relative_to_currid'
    
    def __init__(self, currencyTable: CurrencyTable): ...
    
    def addSnapshotInt(self, i: int, f: float) -> CurrencySnapshot: ...
    
    def addStockSplit(self, i: int, f: float, i2: int, i3: int) -> CurrencySplit: ...
    
    def addStockSplitInt(self, i: int, f: float, i2: int, i3: int) -> CurrencySplit: ...
    
    def adjustRateForSplitsInt(self, i: int, f: float) -> float: ...
    
    def adjustValueForSplits(self, i: int, i2: int) -> int: ...
    
    def adjustValueForSplitsInt(self, i: int, i2: int) -> int: ...
    
    def compareToCurrency(self, currencyType: 'CurrencyType') -> int: ...
    
    def convertValue(self, i: int) -> int: ...
    
    @staticmethod
    def currencyFromFields(i: int, s: str, s2: str, f: float, i2: int, s3: str, s4: str, s5: str, i3: int, i4: int, currencyTable: CurrencyTable) -> 'CurrencyType': ...
    
    def deleteItem(self) -> bool: ...
    
    def format(self, i: int, i2: int) -> str: ...
    
    def formatFancy(self, i: int, i2: int) -> str: ...
    
    def formatNoDecimals(self, i: int) -> str: ...
    
    def formatSemiFancy(self, i: int, i2: int) -> str: ...
    
    def getBaseRate(self) -> float: ...
    
    def getCurrencyType(self) -> str: ...
    
    def getDailyChange(self) -> float: ...
    
    def getDailyVolume(self) -> int: ...
    
    def getDecimalPlaces(self) -> int: ...
    
    def getDoubleValue(self, i: int) -> float: ...
    
    def getEffectiveDateInt(self) -> int: ...
    
    def getHideInUI(self) -> bool: ...
    
    def getID(self) -> int: ...
    
    def getIDForScheme(self, s: str) -> str: ...
    
    def getIDString(self) -> str: ...
    
    def getLongValue(self, f: float) -> int: ...
    
    def getName(self) -> str: ...
    
    def getPrefix(self) -> str: ...
    
    def getRate(self, currencyType: 'CurrencyType') -> float: ...
    
    def getRateByDate(self, i: int, currencyType: 'CurrencyType') -> float: ...
    
    def getRawRate(self) -> float: ...
    
    def getRawRateByDateInt(self, i: int) -> float: ...
    
    def getRelativeCurrency(self) -> 'CurrencyType': ...
    
    def getRelativeRate(self) -> float: ...
    
    def getSnapshotForDate(self, i: int) -> CurrencySnapshot: ...
    
    def getSnapshots(self) -> List[CurrencySnapshot]: ...
    
    def getSplits(self) -> List[CurrencySplit]: ...
    
    def getSuffix(self) -> str: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getTable(self) -> CurrencyTable: ...
    
    def getTickerSymbol(self) -> str: ...
    
    def getUserRate(self) -> float: ...
    
    def getUserRateByDateInt(self, i: int) -> float: ...
    
    def invertValue(self, i: int) -> int: ...
    
    def isDirty(self) -> bool: ...
    
    def itemWasUpdated(self) -> None: ...
    
    def itemWillSync(self) -> None: ...
    
    def parse(self, s: str, i: int) -> int: ...
    
    @staticmethod
    def parseRaw(s: str) -> int: ...
    
    def resetDirtyFlags(self) -> None: ...
    
    def setBaseRate(self, f: float) -> None: ...
    
    def setCurrencyType(self, s: str) -> None: ...
    
    def setDailyChange(self, f: float) -> None: ...
    
    def setDailyVolume(self, i: int) -> None: ...
    
    def setDecimalPlaces(self, i: int) -> None: ...
    
    def setHideInUI(self, b: bool) -> None: ...
    
    def setIDForScheme(self, s: str, s2: str) -> None: ...
    
    def setIDString(self, s: str) -> None: ...
    
    def setName(self, s: str) -> None: ...
    
    def setPrefix(self, s: str) -> None: ...
    
    def setRate(self, f: float, currencyType: 'CurrencyType') -> None: ...
    
    def setRawRate(self, f: float, b: bool) -> None: ...
    
    def setRelativeCurrency(self, currencyType: 'CurrencyType') -> None: ...
    
    def setRelativeRate(self, f: float) -> None: ...
    
    def setSnapshotInt(self, i: int, f: float) -> CurrencySnapshot: ...
    
    def setSuffix(self, s: str) -> None: ...
    
    def setTickerSymbol(self, s: str) -> None: ...
    
    def setUserRate(self, f: float) -> None: ...
    
    def sortSnapshots(self) -> None: ...
    
    def sortStockSplits(self) -> None: ...
    
    def toString(self) -> str: ...
    
    def unadjustValueForSplitsInt(self, i: int, i2: int, i3: int) -> int: ...
    
    
    class Type:
        CURRENCY = 'CURRENCY'
        SECURITY = 'SECURITY'
        
        def __init__(self): ...
        
        def code(self) -> int: ...
        
        def getSyncID(self) -> str: ...
        
        @staticmethod
        def typeForCode(i: int) -> str: ...
        
        @staticmethod
        def typeForSyncID(s: str) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    
class CurrencyUtil:
    CURRENCY_NAME_COMPARATOR = 'com.infinitekind.moneydance.model.CurrencyUtil$1@60cd02f3'
    CURRENCY_TYPENAME_COMPARATOR = 'com.infinitekind.moneydance.model.CurrencyUtil$2@6261cf49'
    
    def __init__(self): ...
    
    @staticmethod
    def convertToBasePrice(f: float, currencyType: CurrencyType, i: int) -> float: ...
    
    @staticmethod
    def convertValue(i: int, currencyType: CurrencyType, currencyType2: CurrencyType) -> int: ...
    
    @staticmethod
    def createDefaultTable(accountBook: AccountBook, s: str) -> CurrencyTable: ...
    
    @staticmethod
    def getRawRate(currencyType: CurrencyType, currencyType2: CurrencyType) -> float: ...
    
    @staticmethod
    def getSplitAdjustedRelativeUserPrice(currencyType: CurrencyType, currencyType2: CurrencyType, i: int) -> float: ...
    
    @staticmethod
    def getUserRate(currencyType: CurrencyType, currencyType2: CurrencyType) -> float: ...
    
    @staticmethod
    def main(list: List[str]) -> None: ...
    
    @staticmethod
    def parseCurrencyExpression(s: str, i: int, currencyType: CurrencyType, currencyTable: CurrencyTable) -> int: ...
    
    
class DateRange:
    def __init__(self): ...
    
    def contains(self, i: int) -> bool: ...
    
    def containsInt(self, i: int) -> bool: ...
    
    def equals(self, o: object) -> bool: ...
    
    def format(self, c: com.infinitekind.util.CustomDateFormat) -> str: ...
    
    def getEndDateInt(self) -> int: ...
    
    def getNumDays(self) -> int: ...
    
    def getNumMonths(self) -> float: ...
    
    def getNumQuarters(self) -> float: ...
    
    def getNumWeeks(self) -> float: ...
    
    def getNumYears(self) -> float: ...
    
    def getStartDateInt(self) -> int: ...
    
    def hashCode(self) -> int: ...
    
    def intersect(self, dateRange: 'DateRange') -> 'DateRange': ...
    
    @staticmethod
    def main(list: List[str]) -> None: ...
    
    def overlap(self, dateRange: 'DateRange') -> bool: ...
    
    @staticmethod
    def rangeOfTxns(transactionSet: 'TransactionSet') -> 'DateRange': ...
    
    def toString(self) -> str: ...
    
    
class DateReminderPair('java.lang.Comparable'):
    date = '<reflected field public int com.infinitekind.moneydance.model.DateReminderPair.date at 0x2>'
    reminder = '<reflected field public com.infinitekind.moneydance.model.Reminder com.infinitekind.moneydance.model.DateReminderPair.reminder at 0x3>'
    
    def __init__(self, i: int, reminder: 'Reminder'): ...
    
    def compareTo(self, dateReminderPair: 'DateReminderPair') -> int: ...
    
    
class GenericTxnSearch(TxnSearch):
    def __init__(self, s: str, s2: str, c: com.infinitekind.util.CustomDateFormat): ...
    
    def equals(self, o: object) -> bool: ...
    
    def matches(self, txn: Txn) -> bool: ...
    
    def matchesAll(self) -> bool: ...
    
    
    class Field:
        ACCOUNT = 'ACCOUNT'
        ANY = 'ANY'
        ANY_TEXT = 'ANY_TEXT'
        CHECKNUM = 'CHECKNUM'
        MEMO = 'MEMO'
        PAYEE = 'PAYEE'
        
        def __init__(self): ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    
class InvestFields:
    amount = '<reflected field public long com.infinitekind.moneydance.model.InvestFields.amount at 0x4>'
    category = '<reflected field public com.infinitekind.moneydance.model.Account com.infinitekind.moneydance.model.InvestFields.category at 0x5>'
    checkNum = '<reflected field public java.lang.String com.infinitekind.moneydance.model.InvestFields.checkNum at 0x6>'
    curr = '<reflected field public com.infinitekind.moneydance.model.CurrencyType com.infinitekind.moneydance.model.InvestFields.curr at 0x7>'
    date = '<reflected field public int com.infinitekind.moneydance.model.InvestFields.date at 0x8>'
    debug = '<reflected field public boolean com.infinitekind.moneydance.model.InvestFields.debug at 0x9>'
    fee = '<reflected field public long com.infinitekind.moneydance.model.InvestFields.fee at 0xa>'
    feeAcct = '<reflected field public com.infinitekind.moneydance.model.Account com.infinitekind.moneydance.model.InvestFields.feeAcct at 0xb>'
    hasAmount = '<reflected field public boolean com.infinitekind.moneydance.model.InvestFields.hasAmount at 0xc>'
    hasCategory = '<reflected field public boolean com.infinitekind.moneydance.model.InvestFields.hasCategory at 0xd>'
    hasFee = '<reflected field public boolean com.infinitekind.moneydance.model.InvestFields.hasFee at 0xe>'
    hasMemo = '<reflected field public boolean com.infinitekind.moneydance.model.InvestFields.hasMemo at 0xf>'
    hasPrice = '<reflected field public boolean com.infinitekind.moneydance.model.InvestFields.hasPrice at 0x10>'
    hasSecurity = '<reflected field public boolean com.infinitekind.moneydance.model.InvestFields.hasSecurity at 0x11>'
    hasShares = '<reflected field public boolean com.infinitekind.moneydance.model.InvestFields.hasShares at 0x12>'
    hasXfrAcct = '<reflected field public boolean com.infinitekind.moneydance.model.InvestFields.hasXfrAcct at 0x13>'
    memo = '<reflected field public java.lang.String com.infinitekind.moneydance.model.InvestFields.memo at 0x14>'
    negateCategory = '<reflected field public boolean com.infinitekind.moneydance.model.InvestFields.negateCategory at 0x15>'
    negateSecurity = '<reflected field public boolean com.infinitekind.moneydance.model.InvestFields.negateSecurity at 0x16>'
    payee = '<reflected field public java.lang.String com.infinitekind.moneydance.model.InvestFields.payee at 0x17>'
    price = '<reflected field public double com.infinitekind.moneydance.model.InvestFields.price at 0x18>'
    secCurr = '<reflected field public com.infinitekind.moneydance.model.CurrencyType com.infinitekind.moneydance.model.InvestFields.secCurr at 0x19>'
    security = '<reflected field public com.infinitekind.moneydance.model.Account com.infinitekind.moneydance.model.InvestFields.security at 0x1a>'
    shares = '<reflected field public long com.infinitekind.moneydance.model.InvestFields.shares at 0x1b>'
    status = '<reflected field public com.infinitekind.moneydance.model.AbstractTxn$ClearedStatus com.infinitekind.moneydance.model.InvestFields.status at 0x1c>'
    taxDate = '<reflected field public int com.infinitekind.moneydance.model.InvestFields.taxDate at 0x1d>'
    txnType = '<reflected field public com.infinitekind.moneydance.model.InvestTxnType com.infinitekind.moneydance.model.InvestFields.txnType at 0x1e>'
    xfrAcct = '<reflected field public com.infinitekind.moneydance.model.Account com.infinitekind.moneydance.model.InvestFields.xfrAcct at 0x1f>'
    
    def __init__(self): ...
    
    @staticmethod
    def safeRate(f: float) -> float: ...
    
    def setFieldStatus(self, txn: Txn) -> None: ...
    
    def storeFields(self, parentTxn: 'ParentTxn') -> None: ...
    
    def toString(self) -> str: ...
    
    
class InvestTxnType('java.lang.Enum'):
    ALL_TXN_TYPES = 'array(com.infinitekind.moneydance.model.InvestTxnType, [BUY, BUY_XFER, SELL, SELL_XFER, DIVIDEND, DIVIDEND_REINVEST, DIVIDENDXFR, SHORT, COVER, MISCINC, MISCEXP, BANK])'
    BANK = 'BANK'
    BUY = 'BUY'
    BUY_XFER = 'BUY_XFER'
    COVER = 'COVER'
    DEFAULT = 'BANK'
    DIVIDEND = 'DIVIDEND'
    DIVIDENDXFR = 'DIVIDENDXFR'
    DIVIDEND_REINVEST = 'DIVIDEND_REINVEST'
    MISCEXP = 'MISCEXP'
    MISCINC = 'MISCINC'
    SELL = 'SELL'
    SELL_XFER = 'SELL_XFER'
    SHORT = 'SHORT'
    
    def __init__(self): ...
    
    def getIDString(self) -> str: ...
    
    def getLongResourceKey(self) -> str: ...
    
    def getResourceKey(self) -> str: ...
    
    def isBuy(self) -> bool: ...
    
    def isDividend(self) -> bool: ...
    
    def isSell(self) -> bool: ...
    
    @staticmethod
    def txnTypeForStringID(s: str) -> 'InvestTxnType': ...
    
    @staticmethod
    def valueOf(s: str) -> 'InvestTxnType': ...
    
    @staticmethod
    def values() -> List['InvestTxnType']: ...
    
    
class InvestUtil:
    UNREALIZED_MARKER = u'|^Unreal^|'
    
    def __init__(self): ...
    
    @staticmethod
    def buildBuyTransactionList(account: Account) -> List[CapitalGainBuy]: ...
    
    @staticmethod
    def computeROI(list: List['ROICashFlowEntry'], f: float) -> float: ...
    
    @staticmethod
    def generateUnrealizedSaleTxn(account: Account, i: int, i2: int) -> 'SplitTxn': ...
    
    @staticmethod
    def getBuyTracker(account: Account, currencyType: CurrencyType, currencyType2: CurrencyType, splitTxn: 'SplitTxn') -> CapitalGainBuy: ...
    
    @staticmethod
    def getCostBasis(account: Account) -> int: ...
    
    @staticmethod
    def getCostBasisCapGain(account: Account, list: List[CapitalGainBuy], splitTxn: 'SplitTxn') -> CapitalGainResult: ...
    
    @staticmethod
    def getCostPerShareValue(account: Account, i: int, i2: int) -> float: ...
    
    @staticmethod
    def getPerShareSalesNet(abstractTxn: AbstractTxn) -> int: ...
    
    @staticmethod
    def getRemainingLots(accountBook: AccountBook, account: Account, i: int) -> Dict[str,AvailableSharesTracker]: ...
    
    @staticmethod
    def getSecurityBalanceInfo(account: Account, i: int, i2: int, currencyType: CurrencyType, i3: int) -> str: ...
    
    @staticmethod
    def isCostBasisValid(account: Account) -> bool: ...
    
    @staticmethod
    def isInvestmentIncome(investTxnType: InvestTxnType) -> bool: ...
    
    @staticmethod
    def isSaleTransaction(investTxnType: InvestTxnType) -> bool: ...
    
    @staticmethod
    def isUserCashFlow(investTxnType: InvestTxnType) -> bool: ...
    
    @staticmethod
    def processLotBasedTxn(txnSet: 'TxnSet', splitTxn: 'SplitTxn', currencyType: CurrencyType, i: int, dict: Dict[str,AvailableSharesTracker]) -> None: ...
    
    @staticmethod
    def recomputeStartDate(list: List['ROICashFlowEntry'], i: int) -> int: ...
    
    
class Legacy:
    def __init__(self): ...
    
    @staticmethod
    def loadLegacyOnlineInfo(accountBook: AccountBook, c: com.infinitekind.util.StreamTable) -> None: ...
    
    @staticmethod
    def makeAccount(accountBook: AccountBook, i: int, s: str, currencyType: CurrencyType, account: Account) -> Account: ...
    
    @staticmethod
    def makeBankAccount(accountBook: AccountBook, s: str, i: int, currencyType: CurrencyType, d: dict, l: list, account: Account, i2: int) -> Account: ...
    
    @staticmethod
    def makeBasicReminder(accountBook: AccountBook, i: int, s: str, i2: int, i3: int, i4: int, list: List[int], i5: int, list2: List[int], i6: int, b: bool, s2: str) -> 'Reminder': ...
    
    @staticmethod
    def makeCurrencyType(i: int, s: str, s2: str, f: float, i2: int, s3: str, s4: str, s5: str, i3: int, i4: int, currencyTable: CurrencyTable) -> CurrencyType: ...
    
    @staticmethod
    def makeExpenseAccount(accountBook: AccountBook, s: str, i: int, currencyType: CurrencyType, d: dict, l: list, account: Account) -> Account: ...
    
    @staticmethod
    def makeIncomeAccount(accountBook: AccountBook, s: str, i: int, currencyType: CurrencyType, d: dict, l: list, account: Account) -> Account: ...
    
    @staticmethod
    def makeInvestmentAccount(accountBook: AccountBook, s: str, i: int, currencyType: CurrencyType, d: dict, l: list, account: Account, i2: int) -> Account: ...
    
    @staticmethod
    def makeTransactionReminder(accountBook: AccountBook, i: int, s: str, i2: int, i3: int, i4: int, list: List[int], i5: int, list2: List[int], i6: int, b: bool, parentTxn: 'ParentTxn') -> 'Reminder': ...
    
    @staticmethod
    def parseParametersFromURL(s: str) -> com.infinitekind.tiksync.SyncRecord: ...
    
    @staticmethod
    def updateLegacyBudgets(accountBook: AccountBook) -> None: ...
    
    @staticmethod
    def updateLegacyReports(accountBook: AccountBook) -> None: ...
    
    
class LegacyTxnTags:
    TAG_PARAM_PREFIX = u'md.txntag.'
    TXN_TAG_KEY = u'md.txntags'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def getTagStringsForIDString(self, s: str) -> List[str]: ...
    
    def getTagsForIDString(self, s: str) -> List[str]: ...
    
    def getTagsForTxn(self, abstractTxn: AbstractTxn) -> List[str]: ...
    
    def loadFromLegacyData(self) -> None: ...
    
    def removeTag(self, s: str) -> bool: ...
    
    def upgradeFromLegacyData(self) -> None: ...
    
    
    class TxnTag:
        TAG_PARAM_PREFIX = u'md.txntag.'
        
        def __init__(self): ...
        
        def compareTo(self, o: object) -> int: ...
        
        def equals(self, o: object) -> bool: ...
        
        def getID(self) -> str: ...
        
        def getName(self) -> str: ...
        
        def hashCode(self) -> int: ...
        
        def setName(self, s: str) -> None: ...
        
        def toString(self) -> str: ...
        
        
    
class LoanFields:
    account = '<reflected field public com.infinitekind.moneydance.model.Account com.infinitekind.moneydance.model.LoanFields.account at 0x20>'
    checkNum = '<reflected field public java.lang.String com.infinitekind.moneydance.model.LoanFields.checkNum at 0x21>'
    date = '<reflected field public int com.infinitekind.moneydance.model.LoanFields.date at 0x22>'
    debug = '<reflected field public boolean com.infinitekind.moneydance.model.LoanFields.debug at 0x23>'
    description = '<reflected field public java.lang.String com.infinitekind.moneydance.model.LoanFields.description at 0x24>'
    escrowAccount = '<reflected field public com.infinitekind.moneydance.model.Account com.infinitekind.moneydance.model.LoanFields.escrowAccount at 0x25>'
    escrowAmount = '<reflected field public long com.infinitekind.moneydance.model.LoanFields.escrowAmount at 0x26>'
    interestAmount = '<reflected field public long com.infinitekind.moneydance.model.LoanFields.interestAmount at 0x27>'
    interestCategory = '<reflected field public com.infinitekind.moneydance.model.Account com.infinitekind.moneydance.model.LoanFields.interestCategory at 0x28>'
    loanAccount = '<reflected field public com.infinitekind.moneydance.model.Account com.infinitekind.moneydance.model.LoanFields.loanAccount at 0x29>'
    memo = '<reflected field public java.lang.String com.infinitekind.moneydance.model.LoanFields.memo at 0x2a>'
    principalAmount = '<reflected field public long com.infinitekind.moneydance.model.LoanFields.principalAmount at 0x2b>'
    status = '<reflected field public byte com.infinitekind.moneydance.model.LoanFields.status at 0x2c>'
    taxDate = '<reflected field public int com.infinitekind.moneydance.model.LoanFields.taxDate at 0x2d>'
    unusedSplits = '<reflected field public java.util.ArrayList com.infinitekind.moneydance.model.LoanFields.unusedSplits at 0x2e>'
    
    def __init__(self): ...
    
    def loadFromTransaction(self, parentTxn: 'ParentTxn') -> None: ...
    
    def saveToTransaction(self, parentTxn: 'ParentTxn') -> None: ...
    
    def toString(self) -> str: ...
    
    
class LocalStorage(com.infinitekind.tiksync.SyncRecord, com.infinitekind.tiksync.SyncStorage):
    def __init__(self): ...
    
    def cacheAuthentication(self, s: str, s2: str) -> None: ...
    
    def clearAuthenticationCache(self, s: str) -> None: ...
    
    def delete(self, s: str) -> None: ...
    
    def exists(self, s: str) -> bool: ...
    
    def fromkeys(self): ...
    
    def getCachedAuthentication(self, s: str) -> str: ...
    
    def isFolder(self, s: str) -> bool: ...
    
    @staticmethod
    def joinPath(s: str, s2: str) -> str: ...
    
    def listFiles(self, s: str) -> List[str]: ...
    
    def listSubfolders(self, s: str) -> List[str]: ...
    
    def moveFile(self, s: str, s2: str) -> None: ...
    
    def openFileForReading(self, s: str) -> 'java.io.InputStream': ...
    
    def openFileForWriting(self, s: str) -> 'java.io.OutputStream': ...
    
    def save(self) -> bool: ...
    
    def writeFile(self, s: str, j: 'java.io.InputStream') -> None: ...
    
    def writeToFileAtomically(self, list: List[int], s: str) -> None: ...
    
    
class MDFileListener:
    def __init__(self): ...
    
    def dirtyStateChanged(self, account: Account) -> None: ...
    
    
class MediaType('java.lang.Enum'):
    DOCUMENT = 'DOCUMENT'
    DOCUMENT_PDF = 'DOCUMENT_PDF'
    IMAGE = 'IMAGE'
    UNKNOWN_MEDIATYPE = 'UNKNOWN_MEDIATYPE'
    
    def __init__(self): ...
    
    def isDocument(self) -> bool: ...
    
    def isImage(self) -> bool: ...
    
    @staticmethod
    def valueOf(s: str) -> 'MediaType': ...
    
    @staticmethod
    def values() -> List['MediaType']: ...
    
    @staticmethod
    def withExtension(s: str) -> 'MediaType': ...
    
    
class MemorizedItemListener:
    def __init__(self): ...
    
    def memorizedReportAdded(self, reportSpec: 'ReportSpec') -> None: ...
    
    def memorizedReportModified(self, reportSpec: 'ReportSpec') -> None: ...
    
    def memorizedReportRemoved(self, reportSpec: 'ReportSpec') -> None: ...
    
    
class OnlineAccountInfo:
    def __init__(self): ...
    
    def createBillPaymentAccount(self) -> 'OnlineAccountInfo': ...
    
    def getAccountKey(self) -> str: ...
    
    def getAccountMessageType(self) -> int: ...
    
    def getAccountNumber(self) -> str: ...
    
    def getAccountType(self) -> str: ...
    
    def getBranchID(self) -> str: ...
    
    def getCanXfrFrom(self) -> bool: ...
    
    def getCanXfrTo(self) -> bool: ...
    
    def getDescription(self) -> str: ...
    
    def getHasTxnDownload(self) -> bool: ...
    
    def getInvestmentAccountType(self) -> str: ...
    
    def getInvestmentBrokerID(self) -> str: ...
    
    def getInvestmentOptionLevel(self) -> str: ...
    
    def getInvestmentProductType(self) -> str: ...
    
    def getInvestmentWithChecking(self) -> bool: ...
    
    def getPhone(self) -> str: ...
    
    def getRoutingNumber(self) -> str: ...
    
    def isActive(self) -> bool: ...
    
    def isAvailable(self) -> bool: ...
    
    def isBankAccount(self) -> bool: ...
    
    def isBillpayAccount(self) -> bool: ...
    
    def isCCAccount(self) -> bool: ...
    
    def isInvestmentAccount(self) -> bool: ...
    
    def isPending(self) -> bool: ...
    
    def setAccountKey(self, s: str) -> None: ...
    
    def setAccountMessageType(self, i: int) -> None: ...
    
    def setAccountNumber(self, s: str) -> None: ...
    
    def setAccountType(self, s: str) -> None: ...
    
    def setBranchID(self, s: str) -> None: ...
    
    def setCanXfrFrom(self, b: bool) -> None: ...
    
    def setCanXfrTo(self, b: bool) -> None: ...
    
    def setDescription(self, s: str) -> None: ...
    
    def setHasTxnDownload(self, b: bool) -> None: ...
    
    def setInvestmentAccountType(self, s: str) -> None: ...
    
    def setInvestmentBrokerID(self, s: str) -> None: ...
    
    def setInvestmentOptionLevel(self, s: str) -> None: ...
    
    def setInvestmentProductType(self, s: str) -> None: ...
    
    def setInvestmentWithChecking(self, b: bool) -> None: ...
    
    def setIsActive(self, b: bool) -> None: ...
    
    def setIsAvailable(self, b: bool) -> None: ...
    
    def setIsBankAccount(self, b: bool) -> None: ...
    
    def setIsBillpayAccount(self, b: bool) -> None: ...
    
    def setIsCCAccount(self, b: bool) -> None: ...
    
    def setIsInvestmentAccount(self, b: bool) -> None: ...
    
    def setIsPending(self, b: bool) -> None: ...
    
    def setPhone(self, s: str) -> None: ...
    
    def setRoutingNumber(self, s: str) -> None: ...
    
    def toString(self) -> str: ...
    
    
class OnlineAccountProxy:
    def __init__(self): ...
    
    def getAccountKey(self) -> str: ...
    
    def getAccountMsgType(self) -> int: ...
    
    def getCurrency(self) -> CurrencyType: ...
    
    def getDownloadedTxns(self) -> 'OnlineTxnList': ...
    
    def getOFXAccountKey(self) -> str: ...
    
    def getOFXAccountNumber(self) -> str: ...
    
    def getOFXAccountType(self) -> str: ...
    
    def getOFXBranchID(self) -> str: ...
    
    def getOFXBrokerID(self) -> str: ...
    
    def getOFXLastTxnUpdate(self) -> int: ...
    
    def getOFXRoutingNumber(self) -> str: ...
    
    def getPayees(self) -> 'OnlinePayeeList': ...
    
    def getPayments(self) -> 'OnlinePaymentList': ...
    
    def isCreditCard(self) -> bool: ...
    
    def isInvestment(self) -> bool: ...
    
    def setOFXLastTxnUpdate(self, i: int) -> None: ...
    
    def setOnlineAvailBalance(self, i: int, i2: int) -> None: ...
    
    def setOnlineLedgerBalance(self, i: int, i2: int) -> None: ...
    
    
class OnlineBankAcctFromInterface:
    def __init__(self): ...
    
    def getAcctFromAcctID(self) -> str: ...
    
    def getAcctFromBankID(self) -> str: ...
    
    def getAcctFromBranchID(self) -> str: ...
    
    def getAcctFromKey(self) -> str: ...
    
    def getAcctFromType(self) -> str: ...
    
    def setAcctFromAcctID(self, s: str) -> None: ...
    
    def setAcctFromBankID(self, s: str) -> None: ...
    
    def setAcctFromBranchID(self, s: str) -> None: ...
    
    def setAcctFromKey(self, s: str) -> None: ...
    
    def setAcctFromType(self, s: str) -> None: ...
    
    
class OnlineBankAcctToInterface:
    def __init__(self): ...
    
    def getAcctToAcctID(self) -> str: ...
    
    def getAcctToBankBranch(self) -> str: ...
    
    def getAcctToBankCity(self) -> str: ...
    
    def getAcctToBankID(self) -> str: ...
    
    def getAcctToBankName(self) -> str: ...
    
    def getAcctToBankPostal(self) -> str: ...
    
    def getAcctToBranchID(self) -> str: ...
    
    def getAcctToKey(self) -> str: ...
    
    def getAcctToPTTAcctID(self) -> str: ...
    
    def getAcctToType(self) -> str: ...
    
    def getHasBankAcctTo(self) -> bool: ...
    
    def getHasExtendedAcctToInfo(self) -> bool: ...
    
    def setAcctToAcctID(self, s: str) -> None: ...
    
    def setAcctToBankBranch(self, s: str) -> None: ...
    
    def setAcctToBankCity(self, s: str) -> None: ...
    
    def setAcctToBankID(self, s: str) -> None: ...
    
    def setAcctToBankName(self, s: str) -> None: ...
    
    def setAcctToBankPostal(self, s: str) -> None: ...
    
    def setAcctToBranchID(self, s: str) -> None: ...
    
    def setAcctToKey(self, s: str) -> None: ...
    
    def setAcctToPTTAcctID(self, s: str) -> None: ...
    
    def setAcctToType(self, s: str) -> None: ...
    
    def setHasBankAcctTo(self, b: bool) -> None: ...
    
    def setHasExtendedAcctToInfo(self, b: bool) -> None: ...
    
    
class OnlineCCAcctToInterface:
    def __init__(self): ...
    
    def getHasCCAcctTo(self) -> bool: ...
    
    def getTOCCAccountNum(self) -> str: ...
    
    def setHasCCAcctTo(self, b: bool) -> None: ...
    
    def setToCCAccountNum(self, s: str) -> None: ...
    
    
class OnlineExtdPayeeInterface:
    def __init__(self): ...
    
    def getDaysToPay(self) -> int: ...
    
    def getHasExtendedPayeeInfo(self) -> bool: ...
    
    def getPayeeID(self) -> str: ...
    
    def getPayeeIDScope(self) -> str: ...
    
    def getPayeeName(self) -> str: ...
    
    def setDaysToPay(self, i: int) -> None: ...
    
    def setHasExtendedPayeeInfo(self, b: bool) -> None: ...
    
    def setPayeeID(self, s: str) -> None: ...
    
    def setPayeeIDScope(self, s: str) -> None: ...
    
    def setPayeeName(self, s: str) -> None: ...
    
    
class OnlineInfo:
    def __init__(self): ...
    
    def addListener(self, onlineInfoListener: 'OnlineInfoListener') -> None: ...
    
    def getAllServices(self) -> List['OnlineService']: ...
    
    def removeListener(self, onlineInfoListener: 'OnlineInfoListener') -> None: ...
    
    
class OnlineInfoListener:
    def __init__(self): ...
    
    def onlineInfoModified(self, onlineInfo: OnlineInfo) -> None: ...
    
    
class OnlineMail('java.lang.Cloneable'):
    def __init__(self): ...
    
    def getDateCreated(self) -> int: ...
    
    def getFrom(self) -> str: ...
    
    def getIncludeImages(self) -> bool: ...
    
    def getMailID(self) -> str: ...
    
    def getMessage(self) -> str: ...
    
    def getSubject(self) -> str: ...
    
    def getTo(self) -> str: ...
    
    def getUseHTML(self) -> bool: ...
    
    def getUserID(self) -> str: ...
    
    def setDateCreated(self, i: int) -> None: ...
    
    def setFrom(self, s: str) -> None: ...
    
    def setIncludeImages(self, b: bool) -> None: ...
    
    def setMailID(self, s: str) -> None: ...
    
    def setMessage(self, s: str) -> None: ...
    
    def setSubject(self, s: str) -> None: ...
    
    def setTo(self, s: str) -> None: ...
    
    def setUseHTML(self, b: bool) -> None: ...
    
    def setUserID(self, s: str) -> None: ...
    
    def toString(self) -> str: ...
    
    
class OnlineMailList(MoneydanceSyncableItem):
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'olmail'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def addNewMail(self, onlineMail: OnlineMail) -> None: ...
    
    def clearAllMails(self) -> None: ...
    
    def getAllMessages(self) -> List[OnlineMail]: ...
    
    def getMailByID(self, s: str) -> OnlineMail: ...
    
    def getMailCount(self) -> int: ...
    
    def getSyncItemType(self) -> str: ...
    
    def newMail(self) -> OnlineMail: ...
    
    def removeMessage(self, onlineMail: OnlineMail) -> bool: ...
    
    
class OnlinePayeeInterface:
    def __init__(self): ...
    
    def getAddr1(self) -> str: ...
    
    def getAddr2(self) -> str: ...
    
    def getAddr3(self) -> str: ...
    
    def getCity(self) -> str: ...
    
    def getCountry(self) -> str: ...
    
    def getDaysToPay(self) -> int: ...
    
    def getHasExtendedPayeeInfo(self) -> bool: ...
    
    def getPayeeIDScope(self) -> str: ...
    
    def getPayeeName(self) -> str: ...
    
    def getPhone(self) -> str: ...
    
    def getPostalCode(self) -> str: ...
    
    def getState(self) -> str: ...
    
    def setAddr1(self, s: str) -> None: ...
    
    def setAddr2(self, s: str) -> None: ...
    
    def setAddr3(self, s: str) -> None: ...
    
    def setCity(self, s: str) -> None: ...
    
    def setCountry(self, s: str) -> None: ...
    
    def setDaysToPay(self, i: int) -> None: ...
    
    def setHasExtendedPayeeInfo(self, b: bool) -> None: ...
    
    def setPayeeIDScope(self, s: str) -> None: ...
    
    def setPayeeName(self, s: str) -> None: ...
    
    def setPhone(self, s: str) -> None: ...
    
    def setPostalCode(self, s: str) -> None: ...
    
    def setState(self, s: str) -> None: ...
    
    
class OnlinePayee(OnlinePayeeInterface, OnlineBankAcctToInterface, OnlineExtdPayeeInterface):
    def __init__(self): ...
    
    def clone(self) -> object: ...
    
    def getAccountNumbersAsString(self) -> str: ...
    
    def getAccountNums(self) -> List[str]: ...
    
    def getAcctToAcctID(self) -> str: ...
    
    def getAcctToBankBranch(self) -> str: ...
    
    def getAcctToBankCity(self) -> str: ...
    
    def getAcctToBankID(self) -> str: ...
    
    def getAcctToBankName(self) -> str: ...
    
    def getAcctToBankPostal(self) -> str: ...
    
    def getAcctToBranchID(self) -> str: ...
    
    def getAcctToKey(self) -> str: ...
    
    def getAcctToPTTAcctID(self) -> str: ...
    
    def getAcctToType(self) -> str: ...
    
    def getAddr1(self) -> str: ...
    
    def getAddr2(self) -> str: ...
    
    def getAddr3(self) -> str: ...
    
    def getCity(self) -> str: ...
    
    def getCountry(self) -> str: ...
    
    def getDaysToPay(self) -> int: ...
    
    def getDefaultCategory(self) -> Account: ...
    
    def getDefaultCategoryID(self) -> int: ...
    
    def getDefaultCategoryUUID(self) -> str: ...
    
    def getHasBankAcctTo(self) -> bool: ...
    
    def getHasExtendedAcctToInfo(self) -> bool: ...
    
    def getHasExtendedPayeeInfo(self) -> bool: ...
    
    def getPayeeID(self) -> str: ...
    
    def getPayeeIDScope(self) -> str: ...
    
    def getPayeeListID(self) -> str: ...
    
    def getPayeeName(self) -> str: ...
    
    def getPhone(self) -> str: ...
    
    def getPostalCode(self) -> str: ...
    
    def getState(self) -> str: ...
    
    def isPayeeUsable(self) -> bool: ...
    
    def isSameAs(self, onlinePayee: 'OnlinePayee') -> bool: ...
    
    def setAccountNums(self, list: List[str]) -> None: ...
    
    def setAcctToAcctID(self, s: str) -> None: ...
    
    def setAcctToBankBranch(self, s: str) -> None: ...
    
    def setAcctToBankCity(self, s: str) -> None: ...
    
    def setAcctToBankID(self, s: str) -> None: ...
    
    def setAcctToBankName(self, s: str) -> None: ...
    
    def setAcctToBankPostal(self, s: str) -> None: ...
    
    def setAcctToBranchID(self, s: str) -> None: ...
    
    def setAcctToKey(self, s: str) -> None: ...
    
    def setAcctToPTTAcctID(self, s: str) -> None: ...
    
    def setAcctToType(self, s: str) -> None: ...
    
    def setAddr1(self, s: str) -> None: ...
    
    def setAddr2(self, s: str) -> None: ...
    
    def setAddr3(self, s: str) -> None: ...
    
    def setCity(self, s: str) -> None: ...
    
    def setCountry(self, s: str) -> None: ...
    
    def setDaysToPay(self, i: int) -> None: ...
    
    def setDefaultCategory(self, account: Account) -> None: ...
    
    def setDefaultCategoryID(self, i: int) -> None: ...
    
    def setDefaultCategoryUUID(self, s: str) -> None: ...
    
    def setHasBankAcctTo(self, b: bool) -> None: ...
    
    def setHasExtendedAcctToInfo(self, b: bool) -> None: ...
    
    def setHasExtendedPayeeInfo(self, b: bool) -> None: ...
    
    def setInfo(self, s: str, s2: str, s3: str, s4: str, s5: str, s6: str, s7: str, s8: str, s9: str) -> None: ...
    
    def setIsPayeeUsable(self, b: bool) -> None: ...
    
    def setPayeeID(self, s: str) -> None: ...
    
    def setPayeeIDScope(self, s: str) -> None: ...
    
    def setPayeeListID(self, s: str) -> None: ...
    
    def setPayeeName(self, s: str) -> None: ...
    
    def setPhone(self, s: str) -> None: ...
    
    def setPostalCode(self, s: str) -> None: ...
    
    def setState(self, s: str) -> None: ...
    
    def toString(self) -> str: ...
    
    
class OnlinePayeeList(MoneydanceSyncableItem):
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'olpayees'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def addListener(self, onlinePayeeListener: 'OnlinePayeeListener') -> None: ...
    
    def addNewPayee(self, onlinePayee: OnlinePayee) -> None: ...
    
    def clearAllPayees(self) -> None: ...
    
    def getPayee(self, i: int) -> OnlinePayee: ...
    
    def getPayeeByListID(self, s: str) -> OnlinePayee: ...
    
    def getPayeeCount(self) -> int: ...
    
    def getPayeeListSyncToken(self) -> str: ...
    
    def getPayeesByName(self, s: str) -> List[OnlinePayee]: ...
    
    def getSyncItemType(self) -> str: ...
    
    def indexOf(self, onlinePayee: OnlinePayee) -> int: ...
    
    def itemWasUpdated(self) -> None: ...
    
    def itemWillSync(self) -> None: ...
    
    def newPayee(self) -> OnlinePayee: ...
    
    def removeListener(self, onlinePayeeListener: 'OnlinePayeeListener') -> None: ...
    
    def removePayee(self, i: int) -> None: ...
    
    def setPayeeListSyncToken(self, s: str) -> None: ...
    
    
class OnlinePayeeListener:
    def __init__(self): ...
    
    def onlinePayeesModified(self, onlinePayeeList: OnlinePayeeList) -> None: ...
    
    
class OnlinePayment(OnlinePayeeInterface, OnlineBankAcctFromInterface, OnlineBankAcctToInterface, OnlineExtdPayeeInterface, 'java.lang.Cloneable'):
    def __init__(self): ...
    
    def clone(self) -> object: ...
    
    def getAcctFromAcctID(self) -> str: ...
    
    def getAcctFromBankID(self) -> str: ...
    
    def getAcctFromBranchID(self) -> str: ...
    
    def getAcctFromKey(self) -> str: ...
    
    def getAcctFromType(self) -> str: ...
    
    def getAcctToAcctID(self) -> str: ...
    
    def getAcctToBankBranch(self) -> str: ...
    
    def getAcctToBankCity(self) -> str: ...
    
    def getAcctToBankID(self) -> str: ...
    
    def getAcctToBankName(self) -> str: ...
    
    def getAcctToBankPostal(self) -> str: ...
    
    def getAcctToBranchID(self) -> str: ...
    
    def getAcctToKey(self) -> str: ...
    
    def getAcctToPTTAcctID(self) -> str: ...
    
    def getAcctToType(self) -> str: ...
    
    def getAddr1(self) -> str: ...
    
    def getAddr2(self) -> str: ...
    
    def getAddr3(self) -> str: ...
    
    def getAmount(self) -> str: ...
    
    def getBillerReference(self) -> str: ...
    
    def getCategory(self) -> Account: ...
    
    def getCategoryID(self) -> int: ...
    
    def getCategoryUUID(self) -> str: ...
    
    def getCheckNum(self) -> str: ...
    
    def getCity(self) -> str: ...
    
    def getCountry(self) -> str: ...
    
    def getCurrency(self) -> str: ...
    
    def getCustomerAcct(self) -> str: ...
    
    def getDateAvailable(self) -> int: ...
    
    def getDateDue(self) -> int: ...
    
    def getDaysToPay(self) -> int: ...
    
    def getHasBankAcctTo(self) -> bool: ...
    
    def getHasExtdPmtInfo(self) -> bool: ...
    
    def getHasExtendedAcctToInfo(self) -> bool: ...
    
    def getHasExtendedPayeeInfo(self) -> bool: ...
    
    def getMemo(self) -> str: ...
    
    def getPayeeID(self) -> str: ...
    
    def getPayeeIDScope(self) -> str: ...
    
    def getPayeeListID(self) -> str: ...
    
    def getPayeeName(self) -> str: ...
    
    def getPaymentDate(self) -> int: ...
    
    def getPaymentExtdBookingTxt(self) -> str: ...
    
    def getPaymentExtdDesc(self) -> str: ...
    
    def getPaymentFor(self) -> str: ...
    
    def getPaymentID(self) -> str: ...
    
    def getPaymentOnBehalfOf(self) -> str: ...
    
    def getPaymentReason(self) -> str: ...
    
    def getPaymentStatus(self) -> str: ...
    
    def getPhone(self) -> str: ...
    
    def getPostalCode(self) -> str: ...
    
    def getRecurringPmtRef(self) -> str: ...
    
    def getState(self) -> str: ...
    
    def getType(self) -> str: ...
    
    def isSameAs(self, onlinePayment: 'OnlinePayment') -> bool: ...
    
    def setAcctFromAcctID(self, s: str) -> None: ...
    
    def setAcctFromBankID(self, s: str) -> None: ...
    
    def setAcctFromBranchID(self, s: str) -> None: ...
    
    def setAcctFromKey(self, s: str) -> None: ...
    
    def setAcctFromType(self, s: str) -> None: ...
    
    def setAcctToAcctID(self, s: str) -> None: ...
    
    def setAcctToBankBranch(self, s: str) -> None: ...
    
    def setAcctToBankCity(self, s: str) -> None: ...
    
    def setAcctToBankID(self, s: str) -> None: ...
    
    def setAcctToBankName(self, s: str) -> None: ...
    
    def setAcctToBankPostal(self, s: str) -> None: ...
    
    def setAcctToBranchID(self, s: str) -> None: ...
    
    def setAcctToKey(self, s: str) -> None: ...
    
    def setAcctToPTTAcctID(self, s: str) -> None: ...
    
    def setAcctToType(self, s: str) -> None: ...
    
    def setAddr1(self, s: str) -> None: ...
    
    def setAddr2(self, s: str) -> None: ...
    
    def setAddr3(self, s: str) -> None: ...
    
    def setAmount(self, s: str) -> None: ...
    
    def setBillerReference(self, s: str) -> None: ...
    
    def setCategory(self, account: Account) -> None: ...
    
    def setCategoryID(self, i: int) -> None: ...
    
    def setCategoryUUID(self, s: str) -> None: ...
    
    def setCheckNum(self, s: str) -> None: ...
    
    def setCity(self, s: str) -> None: ...
    
    def setCountry(self, s: str) -> None: ...
    
    def setCurrency(self, s: str) -> None: ...
    
    def setCustomerAcct(self, s: str) -> None: ...
    
    def setDateAvailable(self, i: int) -> None: ...
    
    def setDateDue(self, i: int) -> None: ...
    
    def setDaysToPay(self, i: int) -> None: ...
    
    def setHasBankAcctTo(self, b: bool) -> None: ...
    
    def setHasExtdPmtInfo(self, b: bool) -> None: ...
    
    def setHasExtendedAcctToInfo(self, b: bool) -> None: ...
    
    def setHasExtendedPayeeInfo(self, b: bool) -> None: ...
    
    def setMemo(self, s: str) -> None: ...
    
    def setPayeeID(self, s: str) -> None: ...
    
    def setPayeeIDScope(self, s: str) -> None: ...
    
    def setPayeeListID(self, s: str) -> None: ...
    
    def setPayeeName(self, s: str) -> None: ...
    
    def setPaymentBookingTxt(self, s: str) -> None: ...
    
    def setPaymentDate(self, i: int) -> None: ...
    
    def setPaymentExtdDesc(self, s: str) -> None: ...
    
    def setPaymentFor(self, s: str) -> None: ...
    
    def setPaymentID(self, s: str) -> None: ...
    
    def setPaymentOnBehalfOf(self, s: str) -> None: ...
    
    def setPaymentReason(self, s: str) -> None: ...
    
    def setPaymentStatus(self, s: str) -> None: ...
    
    def setPhone(self, s: str) -> None: ...
    
    def setPostalCode(self, s: str) -> None: ...
    
    def setRecurringPmtRef(self, s: str) -> None: ...
    
    def setState(self, s: str) -> None: ...
    
    def setType(self, s: str) -> None: ...
    
    def toString(self) -> str: ...
    
    
class OnlinePaymentList(MoneydanceSyncableItem):
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'olpmts'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def addListener(self, onlinePaymentListener: 'OnlinePaymentListener') -> None: ...
    
    def addNewPayment(self, onlinePayment: OnlinePayment) -> None: ...
    
    def clearAllPayments(self) -> None: ...
    
    def clearOldPayments(self) -> None: ...
    
    def getPayment(self, i: int) -> OnlinePayment: ...
    
    def getPaymentByID(self, s: str) -> OnlinePayment: ...
    
    def getPaymentCount(self) -> int: ...
    
    def getPaymentListSyncToken(self) -> str: ...
    
    def getSyncItemType(self) -> str: ...
    
    def indexOf(self, onlinePayment: OnlinePayment) -> int: ...
    
    def itemWasUpdated(self) -> None: ...
    
    def itemWillSync(self) -> None: ...
    
    def newPayment(self, onlinePayee: OnlinePayee) -> OnlinePayment: ...
    
    def removeListener(self, onlinePaymentListener: 'OnlinePaymentListener') -> None: ...
    
    def removePayment(self, i: int) -> None: ...
    
    def setPaymentListSyncToken(self, s: str) -> None: ...
    
    def toString(self) -> str: ...
    
    
class OnlinePaymentListener:
    def __init__(self): ...
    
    def onlinePaymentsModified(self, onlinePaymentList: OnlinePaymentList) -> None: ...
    
    
class OnlineService(MoneydanceSyncableItem):
    ACCT_TYPE_CHECKING = u'CHECKING'
    ACCT_TYPE_CREDIT_CARD = u'CREDITCARD'
    ACCT_TYPE_INVESTMENT = u'INVESTMENT'
    ACCT_TYPE_LINE_OF_CREDIT = u'CREDITLINE'
    ACCT_TYPE_MONEY_MKT = u'MONEYMRKT'
    ACCT_TYPE_SAVINGS = u'SAVINGS'
    DEFAULT_OFX_VERSION = u'102'
    DEFAULT_REQ_REALM = u'default'
    ITEM_KEY_FI_TIK_ID = u'tik_fi_id'
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    MESSAGE_TYPE_BANKING = 4
    MESSAGE_TYPE_BILLDIR = 12
    MESSAGE_TYPE_BILLPAY = 9
    MESSAGE_TYPE_CREDITCARD = 5
    MESSAGE_TYPE_EMAIL = 10
    MESSAGE_TYPE_INTERBANKXFR = 7
    MESSAGE_TYPE_INVESTMENT = 6
    MESSAGE_TYPE_PROF = 1
    MESSAGE_TYPE_SECLIST = 11
    MESSAGE_TYPE_SIGNON = 2
    MESSAGE_TYPE_SIGNUP = 3
    MESSAGE_TYPE_WIREXFR = 8
    PASSWD_TYPE_FIXED = u'FIXED'
    PASSWD_TYPE_HWTOKEN = u'HWTOKEN'
    PASSWD_TYPE_ONETIME = u'ONETIME'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'olsvc'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def cacheAuthentication(self, s: str, s2: str) -> None: ...
    
    def clearAuthenticationCache(self) -> None: ...
    
    def dumpInfo(self) -> None: ...
    
    def getAlwaysSendDateRange(self) -> bool: ...
    
    def getAppID(self, s: str) -> str: ...
    
    def getAppVersion(self, s: str) -> str: ...
    
    def getAvailableAccounts(self) -> List[OnlineAccountInfo]: ...
    
    def getBankCanEmail(self) -> bool: ...
    
    def getBankCanNotify(self) -> bool: ...
    
    def getBankClosingAvail(self) -> bool: ...
    
    def getBankXfrCanModifyModels(self) -> bool: ...
    
    def getBankXfrCanModifyTransfers(self) -> bool: ...
    
    def getBankXfrCanScheduleRecurring(self) -> bool: ...
    
    def getBankXfrCanScheduleTransfers(self) -> bool: ...
    
    def getBankXfrDaysWithdrawn(self) -> int: ...
    
    def getBankXfrDefaultDaysToPay(self) -> int: ...
    
    def getBankXfrModelWindow(self) -> int: ...
    
    def getBankXfrNeedsTAN(self) -> bool: ...
    
    def getBankXfrProcessingDaysOff(self) -> List[str]: ...
    
    def getBankXfrProcessingEndTime(self) -> str: ...
    
    def getBankXfrSupportsDTAvail(self) -> bool: ...
    
    def getBillPayCanAddPayee(self) -> bool: ...
    
    def getBillPayCanModPayments(self) -> bool: ...
    
    def getBillPayDaysWithdrawn(self) -> int: ...
    
    def getBillPayDefaultDaysToPay(self) -> int: ...
    
    def getBillPayHasExtendedPmt(self) -> bool: ...
    
    def getBillPayNeedsTANPayee(self) -> bool: ...
    
    def getBillPayNeedsTANPayment(self) -> bool: ...
    
    def getBillPayPostProcessingWindow(self) -> int: ...
    
    def getBillPayProcessingDaysOff(self) -> List[str]: ...
    
    def getBillPayProcessingEndTime(self) -> str: ...
    
    def getBillPaySupportsDifftFirstPmt(self) -> bool: ...
    
    def getBillPaySupportsDifftLastPmt(self) -> bool: ...
    
    def getBillPaySupportsDtAvail(self) -> bool: ...
    
    def getBillPaySupportsPmtByAddr(self) -> bool: ...
    
    def getBillPaySupportsPmtByPayeeId(self) -> bool: ...
    
    def getBillPaySupportsPmtByXfr(self) -> bool: ...
    
    def getBillPaySupportsStatusModRs(self) -> bool: ...
    
    def getBillPayXfrDaysWith(self) -> int: ...
    
    def getBillPayXfrDefaultDaysToPay(self) -> int: ...
    
    def getBootstrapURL(self) -> 'java.net.URL': ...
    
    def getBootstrapURLString(self) -> str: ...
    
    def getCachedAuthentication(self, s: str) -> str: ...
    
    def getClientIDRequired(self, s: str) -> bool: ...
    
    def getCreditCardClosingAvail(self) -> bool: ...
    
    def getCustServicePhone(self) -> str: ...
    
    def getDateAvailAcctsUpdated(self) -> str: ...
    
    def getDateUpdated(self) -> int: ...
    
    def getEmailSupportsGeneric(self) -> bool: ...
    
    def getEmailSupportsGetMime(self) -> bool: ...
    
    def getFIAddress1(self) -> str: ...
    
    def getFIAddress2(self) -> str: ...
    
    def getFIAddress3(self) -> str: ...
    
    def getFICity(self) -> str: ...
    
    def getFICountry(self) -> str: ...
    
    def getFIEmail(self) -> str: ...
    
    def getFIId(self) -> str: ...
    
    def getFIName(self) -> str: ...
    
    def getFIOrg(self) -> str: ...
    
    def getFIState(self) -> str: ...
    
    def getFIUrl(self) -> str: ...
    
    def getFIUrlIsRedirect(self) -> bool: ...
    
    def getFIZip(self) -> str: ...
    
    def getIgnoreTxnsBeforeLastUpdate(self) -> bool: ...
    
    def getInvalidAcctTypes(self) -> List[str]: ...
    
    def getInvstBrokerID(self) -> str: ...
    
    def getInvstCanDownloadBalances(self) -> bool: ...
    
    def getInvstCanDownloadOOs(self) -> bool: ...
    
    def getInvstCanDownloadPositions(self) -> bool: ...
    
    def getInvstCanDownloadTxns(self) -> bool: ...
    
    def getInvstCanEmail(self) -> bool: ...
    
    def getLastTransactionID(self) -> str: ...
    
    def getMail(self) -> OnlineMailList: ...
    
    def getMailListSyncToken(self, onlineAccountProxy: OnlineAccountProxy) -> str: ...
    
    def getMaxFITIDLength(self) -> int: ...
    
    def getMaxPasswdLength(self, s: str) -> int: ...
    
    def getMinPasswdLength(self, s: str) -> int: ...
    
    def getMsgSetLanguage(self, i: int) -> str: ...
    
    def getMsgSetRspnsFileErrors(self, i: int) -> bool: ...
    
    def getMsgSetSecurity(self, i: int) -> str: ...
    
    def getMsgSetSignonRealm(self, i: int) -> str: ...
    
    def getMsgSetSyncMode(self, i: int) -> str: ...
    
    def getMsgSetTransportSecure(self, i: int) -> bool: ...
    
    def getMsgSetURL(self, i: int) -> 'java.net.URL': ...
    
    def getMsgSetVersion(self, i: int) -> int: ...
    
    def getMustChngPINFirst(self, s: str) -> bool: ...
    
    def getOFXVersion(self) -> str: ...
    
    def getPasswdCanHaveSpaces(self, s: str) -> bool: ...
    
    def getPasswdCanHaveSpecialChars(self, s: str) -> bool: ...
    
    def getPasswdCaseSensitive(self, s: str) -> bool: ...
    
    def getPasswdCharType(self, s: str) -> str: ...
    
    def getPasswdType(self, s: str) -> str: ...
    
    def getPayeeForPayment(self, onlineAccountProxy: OnlineAccountProxy, onlinePayment: OnlinePayment) -> OnlinePayee: ...
    
    def getPayeeListSyncToken(self, onlineAccountProxy: OnlineAccountProxy) -> str: ...
    
    def getPayees(self, onlineAccountProxy: OnlineAccountProxy) -> OnlinePayeeList: ...
    
    def getPaymentListSyncToken(self, onlineAccountProxy: OnlineAccountProxy) -> str: ...
    
    def getPayments(self, onlineAccountProxy: OnlineAccountProxy) -> OnlinePaymentList: ...
    
    def getRealms(self) -> List[str]: ...
    
    def getSecListCanDownloadSecurities(self) -> bool: ...
    
    def getServiceId(self) -> str: ...
    
    def getServiceType(self) -> str: ...
    
    def getSessionCookie(self, s: str) -> str: ...
    
    def getSignupAcctsAvail(self) -> bool: ...
    
    def getSignupCanActivateAcct(self) -> bool: ...
    
    def getSignupCanChgUserInfo(self) -> bool: ...
    
    def getSignupCanPreauth(self) -> bool: ...
    
    def getSignupClientAcctNumReq(self) -> bool: ...
    
    def getSignupViaClient(self) -> bool: ...
    
    def getSignupViaOther(self) -> bool: ...
    
    def getSignupViaOtherMsg(self) -> str: ...
    
    def getSignupViaWeb(self) -> bool: ...
    
    def getSignupViaWebUrl(self) -> str: ...
    
    def getStopChkCanUseDescription(self) -> bool: ...
    
    def getStopChkCanUseRange(self) -> bool: ...
    
    def getStopChkFee(self) -> str: ...
    
    def getStopChkProcessingDaysOff(self) -> List[str]: ...
    
    def getStopChkProcessingEndTime(self) -> str: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getTIKServiceID(self) -> str: ...
    
    def getTechServicePhone(self) -> str: ...
    
    def getTxnDownloadOverlap(self) -> int: ...
    
    def getUpdatedFIId(self) -> str: ...
    
    def getUpdatedFIOrg(self) -> str: ...
    
    def getUseBPFileUIDs(self) -> bool: ...
    
    def getUseClientSpecificUIDS(self) -> bool: ...
    
    def getUseFileUIDs(self) -> bool: ...
    
    def getUseProfileRequest(self) -> bool: ...
    
    def getUseShortDates(self) -> bool: ...
    
    def getUserCanChangePIN(self, s: str) -> bool: ...
    
    def getUserId(self, s: str, onlineAccountProxy: OnlineAccountProxy) -> str: ...
    
    def isSameAs(self, onlineService: 'OnlineService') -> bool: ...
    
    def mergeDataTables(self, d: dict) -> None: ...
    
    def needsFIProfileCheck(self) -> bool: ...
    
    def notifyModified(self) -> None: ...
    
    def resetRealmInfo(self) -> None: ...
    
    def setAvailableAccounts(self, list: List[OnlineAccountInfo]) -> None: ...
    
    def setBankCanEmail(self, b: bool) -> None: ...
    
    def setBankCanNotify(self, b: bool) -> None: ...
    
    def setBankClosingAvail(self, b: bool) -> None: ...
    
    def setBankXfrCanModifyModels(self, b: bool) -> None: ...
    
    def setBankXfrCanModifyTransfers(self, b: bool) -> None: ...
    
    def setBankXfrCanScheduleRecurring(self, b: bool) -> None: ...
    
    def setBankXfrCanScheduleTransfers(self, b: bool) -> None: ...
    
    def setBankXfrDaysWithdrawn(self, i: int) -> None: ...
    
    def setBankXfrDefaultDaysToPay(self, i: int) -> None: ...
    
    def setBankXfrModelWindow(self, i: int) -> None: ...
    
    def setBankXfrNeedsTAN(self, b: bool) -> None: ...
    
    def setBankXfrProcessingDaysOff(self, list: List[str]) -> None: ...
    
    def setBankXfrProcessingEndTime(self, s: str) -> None: ...
    
    def setBankXfrSupportsDTAvail(self, b: bool) -> None: ...
    
    def setBillPayCanAddPayee(self, b: bool) -> None: ...
    
    def setBillPayCanModModels(self) -> bool: ...
    
    def setBillPayCanModPayments(self, b: bool) -> None: ...
    
    def setBillPayDaysWithdrawn(self, i: int) -> None: ...
    
    def setBillPayDefaultDaysToPay(self, i: int) -> None: ...
    
    def setBillPayHasExtendedPmt(self, b: bool) -> None: ...
    
    def setBillPayModelWindow(self) -> int: ...
    
    def setBillPayNeedsTANPayee(self, b: bool) -> None: ...
    
    def setBillPayNeedsTANPayment(self, b: bool) -> None: ...
    
    def setBillPayPostProcessingWindow(self, i: int) -> None: ...
    
    def setBillPayProcessingDaysOff(self, list: List[str]) -> None: ...
    
    def setBillPayProcessingEndTime(self, s: str) -> None: ...
    
    def setBillPaySupportsDifftFirstPmt(self, b: bool) -> None: ...
    
    def setBillPaySupportsDifftLastPmt(self, b: bool) -> None: ...
    
    def setBillPaySupportsDtAvail(self, b: bool) -> None: ...
    
    def setBillPaySupportsPmtByAddr(self, b: bool) -> None: ...
    
    def setBillPaySupportsPmtByPayeeId(self, b: bool) -> None: ...
    
    def setBillPaySupportsPmtByXfr(self, b: bool) -> None: ...
    
    def setBillPaySupportsStatusModRs(self, b: bool) -> None: ...
    
    def setBillPayXfrDaysWith(self, i: int) -> None: ...
    
    def setBillPayXfrDefaultDaysToPay(self, i: int) -> None: ...
    
    def setBootstrapURL(self, j: 'java.net.URL') -> None: ...
    
    def setClientIDRequired(self, s: str, b: bool) -> None: ...
    
    def setCreditCardClosingAvail(self, b: bool) -> None: ...
    
    def setCustServicePhone(self, s: str) -> None: ...
    
    def setDateAvailAcctsUpdated(self, s: str) -> None: ...
    
    def setDateUpdated(self, i: int) -> None: ...
    
    def setEmailSupportsGeneric(self, b: bool) -> None: ...
    
    def setEmailSupportsGetMime(self, b: bool) -> None: ...
    
    def setFIAddress1(self, s: str) -> None: ...
    
    def setFIAddress2(self, s: str) -> None: ...
    
    def setFIAddress3(self, s: str) -> None: ...
    
    def setFICity(self, s: str) -> None: ...
    
    def setFICountry(self, s: str) -> None: ...
    
    def setFIEmail(self, s: str) -> None: ...
    
    def setFIId(self, s: str) -> None: ...
    
    def setFIName(self, s: str) -> None: ...
    
    def setFIOrg(self, s: str) -> None: ...
    
    def setFIState(self, s: str) -> None: ...
    
    def setFIUrl(self, s: str) -> None: ...
    
    def setFIUrlIsRedirect(self, b: bool) -> None: ...
    
    def setFIZip(self, s: str) -> None: ...
    
    def setInvalidAcctTypes(self, list: List[str]) -> None: ...
    
    def setInvstBrokerID(self, s: str) -> None: ...
    
    def setInvstCanDownloadBalances(self, b: bool) -> None: ...
    
    def setInvstCanDownloadOOs(self, b: bool) -> None: ...
    
    def setInvstCanDownloadPositions(self, b: bool) -> None: ...
    
    def setInvstCanDownloadTxns(self, b: bool) -> None: ...
    
    def setInvstCanEmail(self, b: bool) -> None: ...
    
    def setLastTransactionID(self, s: str) -> None: ...
    
    def setMailListSyncToken(self, onlineAccountProxy: OnlineAccountProxy, s: str) -> None: ...
    
    def setMaxPasswdLength(self, s: str, i: int) -> None: ...
    
    def setMinPasswdLength(self, s: str, i: int) -> None: ...
    
    def setMsgSetLanguage(self, i: int, s: str) -> None: ...
    
    def setMsgSetRspnsFileErrors(self, i: int, b: bool) -> None: ...
    
    def setMsgSetSecurity(self, i: int, s: str) -> None: ...
    
    def setMsgSetSignonRealm(self, i: int, s: str) -> None: ...
    
    def setMsgSetSyncMode(self, i: int, s: str) -> None: ...
    
    def setMsgSetTransportSecure(self, i: int, b: bool) -> None: ...
    
    def setMsgSetURL(self, i: int, j: 'java.net.URL') -> None: ...
    
    def setMsgSetVersion(self, i: int, i2: int) -> None: ...
    
    def setMustChngPINFirst(self, s: str, b: bool) -> None: ...
    
    def setPasswdCanHaveSpaces(self, s: str, b: bool) -> None: ...
    
    def setPasswdCanHaveSpecialChars(self, s: str, b: bool) -> None: ...
    
    def setPasswdCaseSensitive(self, s: str, b: bool) -> None: ...
    
    def setPasswdCharType(self, s: str, s2: str) -> None: ...
    
    def setPasswdType(self, s: str, s2: str) -> None: ...
    
    def setPayeeListSyncToken(self, onlineAccountProxy: OnlineAccountProxy, s: str) -> None: ...
    
    def setPaymentListSyncToken(self, onlineAccountProxy: OnlineAccountProxy, s: str) -> None: ...
    
    def setProfileUpdateNeeded(self) -> None: ...
    
    def setSecListCanDownloadSecurities(self, b: bool) -> None: ...
    
    def setSessionCookie(self, s: str, s2: str) -> None: ...
    
    def setSignupAcctsAvail(self, b: bool) -> None: ...
    
    def setSignupCanActivateAcct(self, b: bool) -> None: ...
    
    def setSignupCanChgUserInfo(self, b: bool) -> None: ...
    
    def setSignupCanPreauth(self, b: bool) -> None: ...
    
    def setSignupClientAcctNumReq(self, b: bool) -> None: ...
    
    def setSignupViaClient(self, b: bool) -> None: ...
    
    def setSignupViaOther(self, b: bool) -> None: ...
    
    def setSignupViaOtherMsg(self, s: str) -> None: ...
    
    def setSignupViaWeb(self, b: bool) -> None: ...
    
    def setSignupViaWebUrl(self, s: str) -> None: ...
    
    def setStopChkCanUseDescription(self, b: bool) -> None: ...
    
    def setStopChkCanUseRange(self, b: bool) -> None: ...
    
    def setStopChkFee(self, s: str) -> None: ...
    
    def setStopChkProcessingDaysOff(self, list: List[str]) -> None: ...
    
    def setStopChkProcessingEndTime(self, s: str) -> None: ...
    
    def setTechServicePhone(self, s: str) -> None: ...
    
    def setUpdatedProfile(self) -> None: ...
    
    def setUserCanChangePIN(self, s: str, b: bool) -> None: ...
    
    def setUserId(self, s: str, onlineAccountProxy: OnlineAccountProxy, s2: str) -> None: ...
    
    def setUsesFITag(self, b: bool) -> None: ...
    
    def shouldDecrementLastTxnDate(self) -> bool: ...
    
    def supportsMsgSet(self, i: int) -> bool: ...
    
    def toString(self) -> str: ...
    
    def useTerribleTLSV1Hack(self) -> bool: ...
    
    def usesBillPayExtendedAcctTo(self) -> bool: ...
    
    def usesFITag(self) -> bool: ...
    
    def usesPTTAcctIDField(self) -> bool: ...
    
    
class OnlineTxn(OnlinePayeeInterface, OnlineBankAcctToInterface, OnlineCCAcctToInterface):
    CORRECTION_DELETE = 2
    CORRECTION_NONE = 0
    CORRECTION_REPLACE = 1
    INVEST_TXN_BANK = u'bank'
    INVEST_TXN_BUY = u'buy'
    INVEST_TXN_DIVIDEND = u'div'
    INVEST_TXN_MISCEXP = u'miscexp'
    INVEST_TXN_MISCINC = u'miscinc'
    INVEST_TXN_NULL = u'null'
    INVEST_TXN_SELL = u'sell'
    INVEST_TXN_SPLIT = u'split'
    INVEST_TXN_TRANSFER = u'xfr'
    PREFER_AMT_SIGN_TO_TXN_TYPE = False
    PROTO_TYPE_OFX = 1
    PROTO_TYPE_QIF = 2
    QIF_FI_ID = u'qif'
    STATUS_ACCEPTED = 1
    STATUS_NEW = 0
    
    def __init__(self): ...
    
    def containsSameFields(self, onlineTxn: 'OnlineTxn') -> bool: ...
    
    def getAccruedInterest(self) -> int: ...
    
    def getAcctToAcctID(self) -> str: ...
    
    def getAcctToBankBranch(self) -> str: ...
    
    def getAcctToBankCity(self) -> str: ...
    
    def getAcctToBankID(self) -> str: ...
    
    def getAcctToBankName(self) -> str: ...
    
    def getAcctToBankPostal(self) -> str: ...
    
    def getAcctToBranchID(self) -> str: ...
    
    def getAcctToKey(self) -> str: ...
    
    def getAcctToPTTAcctID(self) -> str: ...
    
    def getAcctToType(self) -> str: ...
    
    def getAddr1(self) -> str: ...
    
    def getAddr2(self) -> str: ...
    
    def getAddr3(self) -> str: ...
    
    def getAllowDuplicateIDs(self) -> bool: ...
    
    def getAmount(self) -> int: ...
    
    def getAvgCostBasis(self) -> int: ...
    
    def getBuyType(self) -> str: ...
    
    def getCategoryName(self) -> str: ...
    
    def getCheckNum(self) -> str: ...
    
    def getCity(self) -> str: ...
    
    def getCommission(self) -> int: ...
    
    def getCorrectedFITxnID(self) -> str: ...
    
    def getCorrectionAction(self) -> int: ...
    
    def getCountry(self) -> str: ...
    
    def getDate(self) -> int: ...
    
    def getDateAvailable(self) -> int: ...
    
    def getDateAvailableInt(self) -> int: ...
    
    def getDateInitiated(self) -> int: ...
    
    def getDateInitiatedInt(self) -> int: ...
    
    def getDatePosted(self) -> int: ...
    
    def getDatePostedInt(self) -> int: ...
    
    def getDatePurchasedInt(self) -> int: ...
    
    def getDaysToPay(self) -> int: ...
    
    def getFIID(self) -> str: ...
    
    def getFITxnId(self) -> str: ...
    
    def getFees(self) -> int: ...
    
    def getGain(self) -> int: ...
    
    def getHasBankAcctTo(self) -> bool: ...
    
    def getHasCCAcctTo(self) -> bool: ...
    
    def getHasExtendedAcctToInfo(self) -> bool: ...
    
    def getHasExtendedPayeeInfo(self) -> bool: ...
    
    def getIncomeType(self) -> str: ...
    
    def getInvestTxnType(self) -> str: ...
    
    def getLoad(self) -> int: ...
    
    def getLocalStatus(self) -> int: ...
    
    def getMarkDown(self) -> str: ...
    
    def getMarkUp(self) -> str: ...
    
    def getMemo(self) -> str: ...
    
    def getName(self) -> str: ...
    
    def getNumShares(self) -> str: ...
    
    def getOFXTxnType(self) -> str: ...
    
    def getOptionAction(self) -> str: ...
    
    def getOriginalForm(self) -> str: ...
    
    def getPayeeID(self) -> str: ...
    
    def getPayeeIDScope(self) -> str: ...
    
    def getPayeeName(self) -> str: ...
    
    def getPhone(self) -> str: ...
    
    def getPositionType(self) -> str: ...
    
    def getPostalCode(self) -> str: ...
    
    def getProtocolType(self) -> int: ...
    
    def getRefNum(self) -> str: ...
    
    def getReinvest(self) -> bool: ...
    
    def getRelatedTradeID(self) -> str: ...
    
    def getRelatedTradeType(self) -> str: ...
    
    def getSIC(self) -> str: ...
    
    def getSecuredOption(self) -> str: ...
    
    def getSecurityID(self) -> str: ...
    
    def getSecurityIDType(self) -> str: ...
    
    def getSellReason(self) -> str: ...
    
    def getSellType(self) -> str: ...
    
    def getServerTxnID(self) -> str: ...
    
    def getSharePrice(self) -> str: ...
    
    def getSharesPerContract(self) -> str: ...
    
    def getSortDateInt(self) -> int: ...
    
    def getState(self) -> str: ...
    
    def getStockSplitDenominator(self) -> str: ...
    
    def getStockSplitExtraCash(self) -> str: ...
    
    def getStockSplitNewUnits(self) -> str: ...
    
    def getStockSplitNumerator(self) -> str: ...
    
    def getStockSplitOldUnits(self) -> str: ...
    
    def getSubAccountFrom(self) -> str: ...
    
    def getSubAccountFund(self) -> str: ...
    
    def getSubAccountTo(self) -> str: ...
    
    def getSubAccountType(self) -> str: ...
    
    def getTOCCAccountNum(self) -> str: ...
    
    def getTaxExempt(self) -> bool: ...
    
    def getTaxes(self) -> int: ...
    
    def getTotalAmount(self) -> int: ...
    
    def getTradeDateInt(self) -> int: ...
    
    def getTransferDirection(self) -> str: ...
    
    def getTxnType(self) -> str: ...
    
    def getWitholding(self) -> int: ...
    
    def isSameAs(self, onlineTxn: 'OnlineTxn') -> bool: ...
    
    def setAccruedInterest(self, i: int) -> None: ...
    
    def setAcctToAcctID(self, s: str) -> None: ...
    
    def setAcctToBankBranch(self, s: str) -> None: ...
    
    def setAcctToBankCity(self, s: str) -> None: ...
    
    def setAcctToBankID(self, s: str) -> None: ...
    
    def setAcctToBankName(self, s: str) -> None: ...
    
    def setAcctToBankPostal(self, s: str) -> None: ...
    
    def setAcctToBranchID(self, s: str) -> None: ...
    
    def setAcctToKey(self, s: str) -> None: ...
    
    def setAcctToPTTAcctID(self, s: str) -> None: ...
    
    def setAcctToType(self, s: str) -> None: ...
    
    def setAddr1(self, s: str) -> None: ...
    
    def setAddr2(self, s: str) -> None: ...
    
    def setAddr3(self, s: str) -> None: ...
    
    def setAllowDuplicateIDs(self, b: bool) -> None: ...
    
    def setAmount(self, i: int) -> None: ...
    
    def setAvgCostBasis(self, i: int) -> None: ...
    
    def setBuyType(self, s: str) -> None: ...
    
    def setCategoryName(self, s: str) -> None: ...
    
    def setCheckNum(self, s: str) -> None: ...
    
    def setCity(self, s: str) -> None: ...
    
    def setCommission(self, i: int) -> None: ...
    
    def setCorrectedFITxnID(self, s: str) -> None: ...
    
    def setCorrectionAction(self, i: int) -> None: ...
    
    def setCountry(self, s: str) -> None: ...
    
    def setDateAvailable(self, i: int) -> None: ...
    
    def setDateAvailableInt(self, i: int) -> None: ...
    
    def setDateInitiated(self, i: int) -> None: ...
    
    def setDateInitiatedInt(self, i: int) -> None: ...
    
    def setDatePosted(self, i: int) -> None: ...
    
    def setDatePostedInt(self, i: int) -> None: ...
    
    def setDatePurchasedInt(self, i: int) -> None: ...
    
    def setDaysToPay(self, i: int) -> None: ...
    
    def setFIID(self, s: str) -> None: ...
    
    def setFITxnId(self, s: str) -> None: ...
    
    def setFees(self, i: int) -> None: ...
    
    def setGain(self, i: int) -> None: ...
    
    def setHasBankAcctTo(self, b: bool) -> None: ...
    
    def setHasCCAcctTo(self, b: bool) -> None: ...
    
    def setHasExtendedAcctToInfo(self, b: bool) -> None: ...
    
    def setHasExtendedPayeeInfo(self, b: bool) -> None: ...
    
    def setIncomeType(self, s: str) -> None: ...
    
    def setInvestTxnType(self, s: str) -> None: ...
    
    def setLoad(self, i: int) -> None: ...
    
    def setLocalStatus(self, i: int) -> None: ...
    
    def setMarkDown(self, s: str) -> None: ...
    
    def setMarkUp(self, s: str) -> None: ...
    
    def setMemo(self, s: str) -> None: ...
    
    def setName(self, s: str) -> None: ...
    
    def setNumShares(self, s: str) -> None: ...
    
    def setOFXTxnType(self, s: str) -> None: ...
    
    def setOptionAction(self, s: str) -> None: ...
    
    def setOriginalForm(self, s: str) -> None: ...
    
    def setPayeeID(self, s: str) -> None: ...
    
    def setPayeeIDScope(self, s: str) -> None: ...
    
    def setPayeeName(self, s: str) -> None: ...
    
    def setPhone(self, s: str) -> None: ...
    
    def setPositionType(self, s: str) -> None: ...
    
    def setPostalCode(self, s: str) -> None: ...
    
    def setProtocolType(self, i: int) -> None: ...
    
    def setRefNum(self, s: str) -> None: ...
    
    def setReinvest(self, b: bool) -> None: ...
    
    def setRelatedTradeID(self, s: str) -> None: ...
    
    def setRelatedTradeType(self, s: str) -> None: ...
    
    def setSIC(self, s: str) -> None: ...
    
    def setSecuredOption(self, s: str) -> None: ...
    
    def setSecurityID(self, s: str) -> None: ...
    
    def setSecurityIDType(self, s: str) -> None: ...
    
    def setSellReason(self, s: str) -> None: ...
    
    def setSellType(self, s: str) -> None: ...
    
    def setServerTxnID(self, s: str) -> None: ...
    
    def setSharePrice(self, s: str) -> None: ...
    
    def setSharesPerContract(self, s: str) -> None: ...
    
    def setState(self, s: str) -> None: ...
    
    def setStockSplitDenominator(self, s: str) -> None: ...
    
    def setStockSplitExtraCash(self, s: str) -> None: ...
    
    def setStockSplitNewUnits(self, s: str) -> None: ...
    
    def setStockSplitNumerator(self, s: str) -> None: ...
    
    def setStockSplitOldUnits(self, s: str) -> None: ...
    
    def setSubAccountFrom(self, s: str) -> None: ...
    
    def setSubAccountFund(self, s: str) -> None: ...
    
    def setSubAccountTo(self, s: str) -> None: ...
    
    def setSubAccountType(self, s: str) -> None: ...
    
    def setTaxExempt(self, b: bool) -> None: ...
    
    def setTaxes(self, i: int) -> None: ...
    
    def setToCCAccountNum(self, s: str) -> None: ...
    
    def setTotalAmount(self, i: int) -> None: ...
    
    def setTransferDirection(self, s: str) -> None: ...
    
    def setTxnType(self, s: str) -> None: ...
    
    def setWitholding(self, i: int) -> None: ...
    
    def toSerializedString(self) -> str: ...
    
    def toString(self) -> str: ...
    
    
class OnlineTxnList(MoneydanceSyncableItem):
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'oltxns'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def addListener(self, onlineTxnListener: 'OnlineTxnListener') -> None: ...
    
    def addNewTxn(self, onlineTxn: OnlineTxn) -> None: ...
    
    def getOFXLastTxnUpdate(self) -> int: ...
    
    def getOnlineAvailBalance(self) -> int: ...
    
    def getOnlineAvailBalanceDate(self) -> int: ...
    
    def getOnlineLedgerBalance(self) -> int: ...
    
    def getOnlineLedgerBalanceDate(self) -> int: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getTxn(self, i: int) -> OnlineTxn: ...
    
    def getTxnCount(self) -> int: ...
    
    def hasOnlineAvailBalance(self) -> bool: ...
    
    def hasOnlineLedgerBalance(self) -> bool: ...
    
    def indexOf(self, onlineTxn: OnlineTxn) -> int: ...
    
    def newTxn(self) -> OnlineTxn: ...
    
    def newTxnFromString(self, s: str) -> OnlineTxn: ...
    
    def removeListener(self, onlineTxnListener: 'OnlineTxnListener') -> None: ...
    
    def removeTxn(self, i: int) -> None: ...
    
    def setOFXLastTxnUpdate(self, i: int) -> None: ...
    
    def setOnlineAvailBalance(self, i: int, i2: int) -> None: ...
    
    def setOnlineLedgerBalance(self, i: int, i2: int) -> None: ...
    
    def sortTransactions(self) -> None: ...
    
    
class OnlineTxnListener:
    def __init__(self): ...
    
    def onlineTxnsModified(self, onlineTxnList: OnlineTxnList) -> None: ...
    
    
class ParentTxn(AbstractTxn):
    BANK_TRANSACTION_TYPE = 0
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    PRINT_CHECKNUM_PREFIX = u'{'
    PRINT_CHECKNUM_SUFFIX = u'}'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SPLIT_TRANSACTION_TYPE = 1
    STATUS_CLEARED = 20
    STATUS_RECONCILING = 30
    STATUS_UNRECONCILED = 40
    SYNCABLE_TYPE_VALUE = u'txn'
    TAG_FITID_PREFIX = u'ol_fitid_'
    TAG_FI_ID = u'ol_fi_id'
    TAG_INVST_SPLIT_EXP = u'exp'
    TAG_INVST_SPLIT_FEE = u'fee'
    TAG_INVST_SPLIT_INC = u'inc'
    TAG_INVST_SPLIT_SEC = u'sec'
    TAG_INVST_SPLIT_TYPE = u'invest.splittype'
    TAG_INVST_SPLIT_XFR = u'xfr'
    TAG_INVST_TXN_TYPE = u'invest.txntype'
    TAG_IS_NEW_TXN = u'ol.match-status'
    TAG_ONLINE_PMT_ID = u'ol_pmtid'
    TAG_QIF_IMPORT_SESSION = u'qif_sn'
    TAG_QIF_INVST_ACTION = u'qif_invst_action'
    TAG_RECON_ASOFDT = u'rec_asof'
    TAG_RECON_DATE = u'rec_dt'
    TAG_SPLIT_ADDED = u'split_added'
    TAG_SPLIT_AMOUNT = u'split_amount'
    TAG_SPLIT_CALC = u'split_calc'
    TAG_SPLIT_PAIR = u'split_pair'
    TRANSFER_TYPE_BANK = u'xfrtp_bank'
    TRANSFER_TYPE_BUYSELL = u'xfrtp_buysell'
    TRANSFER_TYPE_BUYSELLXFR = u'xfrtp_buysellxfr'
    TRANSFER_TYPE_DIVIDEND = u'xfrtp_dividend'
    TRANSFER_TYPE_DIVIDENDXFR = u'xfrtp_dividendxfr'
    TRANSFER_TYPE_MISCINCEXP = u'xfrtp_miscincexp'
    TRANSFER_TYPE_SHORTCOVER = u'xfrtp_shortcover'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def addSplit(self, splitTxn: 'SplitTxn') -> None: ...
    
    def duplicate(self) -> MoneydanceSyncableItem: ...
    
    def duplicateAsNew(self) -> 'ParentTxn': ...
    
    def getCheckNumber(self) -> str: ...
    
    def getDateEntered(self) -> int: ...
    
    def getDateInt(self) -> int: ...
    
    def getInvestTxnType(self) -> InvestTxnType: ...
    
    def getMemo(self) -> str: ...
    
    def getOtherTxn(self, i: int) -> AbstractTxn: ...
    
    def getOtherTxnCount(self) -> int: ...
    
    def getParentTxn(self) -> 'ParentTxn': ...
    
    def getSplit(self, i: int) -> 'SplitTxn': ...
    
    def getSplitCount(self) -> int: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getTaxDateInt(self) -> int: ...
    
    def getTransferType(self) -> str: ...
    
    def getValue(self) -> int: ...
    
    def indexOfSplit(self, splitTxn: 'SplitTxn') -> int: ...
    
    def isDirty(self) -> bool: ...
    
    def isTransferTo(self, account: Account) -> bool: ...
    
    def itemWasUpdated(self) -> None: ...
    
    def itemWillSync(self) -> None: ...
    
    @staticmethod
    def makeParentTxn(accountBook: AccountBook, i: int, i2: int, i3: int, s: str, account: Account, s2: str, s3: str, i4: int, i5: int) -> 'ParentTxn': ...
    
    def removeSplit(self, i: int) -> bool: ...
    
    def setCheckNumber(self, s: str) -> None: ...
    
    def setDateEntered(self, i: int) -> None: ...
    
    def setDateInt(self, i: int) -> None: ...
    
    def setInvestTxnType(self, investTxnType: InvestTxnType) -> None: ...
    
    def setMemo(self, s: str) -> None: ...
    
    def setTaxDateInt(self, i: int) -> None: ...
    
    def setTransferType(self, s: str) -> None: ...
    
    def toMultilineString(self) -> str: ...
    
    def toString(self) -> str: ...
    
    
class PaymentSchedule:
    def __init__(self, account: Account): ...
    
    def calculateFromLoanAccount(self) -> None: ...
    
    def getEscrowPmtRate(self) -> float: ...
    
    def getIntPmtRate(self) -> float: ...
    
    def getInterestRemaining(self) -> int: ...
    
    def getLoanPmtRate(self) -> float: ...
    
    def getMonthlyPayment(self) -> int: ...
    
    def getNumPmtsRemaining(self) -> int: ...
    
    def getNxtInterest(self) -> int: ...
    
    def getNxtPrincipal(self) -> int: ...
    
    def refresh(self) -> None: ...
    
    
class PeriodType('java.lang.Enum'):
    BIWEEK = 'BIWEEK'
    MONTH = 'MONTH'
    WEEK = 'WEEK'
    YEAR = 'YEAR'
    
    def __init__(self): ...
    
    def addPeriodToDate(self, i: int) -> int: ...
    
    @staticmethod
    def all() -> List['PeriodType']: ...
    
    @staticmethod
    def filter(periodType: 'PeriodType', periodTypeFilter: 'PeriodTypeFilter') -> List['PeriodType']: ...
    
    @staticmethod
    def fromOrder(i: int) -> 'PeriodType': ...
    
    def getCalendarField(self) -> int: ...
    
    def getDaysInPeriodContaining(self, i: int) -> int: ...
    
    def getFirstDayInPeriod(self, i: int) -> int: ...
    
    def getOrder(self) -> int: ...
    
    def incrementDateByPeriod(self, i: int, i2: int) -> int: ...
    
    @staticmethod
    def valueOf(s: str) -> 'PeriodType': ...
    
    @staticmethod
    def values() -> List['PeriodType']: ...
    
    
class PeriodTypeFilter:
    FILTER_LARGER = 'com.infinitekind.moneydance.model.PeriodTypeFilter$LargerPeriodTypeFilter@71aab91a'
    FILTER_LARGER_OR_EQUAL = 'com.infinitekind.moneydance.model.PeriodTypeFilter$LargerPeriodTypeFilter@79ff5c29'
    FILTER_NARROWER = 'com.infinitekind.moneydance.model.PeriodTypeFilter$NarrowerPeriodTypeFilter@48ecbab8'
    FILTER_NARROWER_OR_EQUAL = 'com.infinitekind.moneydance.model.PeriodTypeFilter$NarrowerPeriodTypeFilter@4260b9'
    
    def __init__(self): ...
    
    def filter(self, periodType: PeriodType) -> List[PeriodType]: ...
    
    
    class EqualPolicy:
        EXCLUDE = 'EXCLUDE'
        INCLUDE = 'INCLUDE'
        
        def __init__(self): ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    class LargerPeriodTypeFilter:
        FILTER_LARGER = 'com.infinitekind.moneydance.model.PeriodTypeFilter$LargerPeriodTypeFilter@71aab91a'
        FILTER_LARGER_OR_EQUAL = 'com.infinitekind.moneydance.model.PeriodTypeFilter$LargerPeriodTypeFilter@79ff5c29'
        FILTER_NARROWER = 'com.infinitekind.moneydance.model.PeriodTypeFilter$NarrowerPeriodTypeFilter@48ecbab8'
        FILTER_NARROWER_OR_EQUAL = 'com.infinitekind.moneydance.model.PeriodTypeFilter$NarrowerPeriodTypeFilter@4260b9'
        
        def __init__(self): ...
        
        def filter(self, periodType: PeriodType) -> List[PeriodType]: ...
        
        
    class NarrowerPeriodTypeFilter:
        FILTER_LARGER = 'com.infinitekind.moneydance.model.PeriodTypeFilter$LargerPeriodTypeFilter@71aab91a'
        FILTER_LARGER_OR_EQUAL = 'com.infinitekind.moneydance.model.PeriodTypeFilter$LargerPeriodTypeFilter@79ff5c29'
        FILTER_NARROWER = 'com.infinitekind.moneydance.model.PeriodTypeFilter$NarrowerPeriodTypeFilter@48ecbab8'
        FILTER_NARROWER_OR_EQUAL = 'com.infinitekind.moneydance.model.PeriodTypeFilter$NarrowerPeriodTypeFilter@4260b9'
        
        def __init__(self): ...
        
        def filter(self, periodType: PeriodType) -> List[PeriodType]: ...
        
        
    
class ROICashFlowEntry('java.lang.Comparable'):
    def __init__(self, i: int, i2: int, currencyType: CurrencyType, i3: int): ...
    
    def annumsInPeriod(self) -> float: ...
    
    def compareTo(self, rOICashFlowEntry: 'ROICashFlowEntry') -> int: ...
    
    @staticmethod
    def getCashFlowAmount(splitTxn: 'SplitTxn', investTxnType: InvestTxnType, currencyType: CurrencyType) -> int: ...
    
    def getDateInt(self) -> int: ...
    
    def getValue(self) -> float: ...
    
    def setStartDate(self, i: int) -> None: ...
    
    
class RateAdjustmentOption('java.lang.Enum'):
    ADJUST_LOCAL_AMOUNT = 'ADJUST_LOCAL_AMOUNT'
    ADJUST_NONE = 'ADJUST_NONE'
    ADJUST_OTHER_AMOUNT = 'ADJUST_OTHER_AMOUNT'
    DEFAULT_OPTION = 'ADJUST_OTHER_AMOUNT'
    
    def __init__(self): ...
    
    @staticmethod
    def fromIDString(s: str) -> 'RateAdjustmentOption': ...
    
    def getIDString(self) -> str: ...
    
    @staticmethod
    def valueOf(s: str) -> 'RateAdjustmentOption': ...
    
    @staticmethod
    def values() -> List['RateAdjustmentOption']: ...
    
    
class Reminder(MoneydanceSyncableItem):
    BASIC_REMINDER_TYPE = 1
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    LAST_DAY_OF_MONTH = 32
    MONTHLY_EVERY = 0
    MONTHLY_EVERY_FOURTH = 3
    MONTHLY_EVERY_OTHER = 1
    MONTHLY_EVERY_SIXTH = 4
    MONTHLY_EVERY_THIRD = 2
    REPEAT_BY_DAY_OF_MONTH = 2
    REPEAT_BY_DAY_OF_WEEK = 1
    REPEAT_BY_EVERY_YEAR = 4
    REPEAT_BY_NDAYS = 3
    REPEAT_BY_NONE = 0
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'reminder'
    TXN_REMINDER_TYPE = 0
    WEEKLY_EVERY = 0
    WEEKLY_EVERY_FIFTH = 5
    WEEKLY_EVERY_FIRST = 1
    WEEKLY_EVERY_FOURTH = 4
    WEEKLY_EVERY_LAST = 6
    WEEKLY_EVERY_SECOND = 2
    WEEKLY_EVERY_THIRD = 3
    
    def __init__(self, accountBook: AccountBook): ...
    
    def getAutoCommitDays(self) -> int: ...
    
    def getDateAcknowledgedInt(self) -> int: ...
    
    def getDescription(self) -> str: ...
    
    def getId(self) -> int: ...
    
    def getInitialDateInt(self) -> int: ...
    
    def getLastDateInt(self) -> int: ...
    
    def getMemo(self) -> str: ...
    
    def getNextOccurance(self, i: int) -> int: ...
    
    def getPastDueDates(self, j: 'java.util.Calendar') -> List['java.util.Date']: ...
    
    def getRateAdjustmentOption(self) -> RateAdjustmentOption: ...
    
    def getReminderType(self) -> str: ...
    
    def getRepeatDaily(self) -> int: ...
    
    def getRepeatMonthly(self) -> List[int]: ...
    
    def getRepeatMonthlyModifier(self) -> int: ...
    
    def getRepeatWeeklyDays(self) -> List[int]: ...
    
    def getRepeatWeeklyModifier(self) -> int: ...
    
    def getRepeatYearly(self) -> bool: ...
    
    def getSyncItemType(self) -> str: ...
    
    def getTags(self) -> com.infinitekind.tiksync.SyncRecord: ...
    
    def getTransaction(self) -> ParentTxn: ...
    
    def hasBeenAcknowledged(self, j: 'java.util.Date') -> bool: ...
    
    def hasBeenAcknowledgedInt(self, i: int) -> bool: ...
    
    def isLoanReminder(self) -> bool: ...
    
    def occursOnDate(self, j: 'java.util.Calendar') -> bool: ...
    
    def setAcknowledgedInt(self, i: int) -> None: ...
    
    def setAutoCommitDays(self, i: int) -> None: ...
    
    def setDescription(self, s: str) -> None: ...
    
    def setId(self, i: int) -> None: ...
    
    def setInitialDateInt(self, i: int) -> None: ...
    
    def setLastDateInt(self, i: int) -> None: ...
    
    def setLoan(self, b: bool) -> None: ...
    
    def setMemo(self, s: str) -> None: ...
    
    def setRateAdjustmentOption(self, rateAdjustmentOption: RateAdjustmentOption) -> None: ...
    
    def setReminderType(self, s: str) -> None: ...
    
    def setRepeatDaily(self, i: int) -> None: ...
    
    def setRepeatMonthly(self, i: int, list: List[int]) -> None: ...
    
    def setRepeatWeekly(self, i: int, list: List[int]) -> None: ...
    
    def setRepeatYearly(self, b: bool) -> None: ...
    
    def setTransaction(self, parentTxn: ParentTxn) -> None: ...
    
    def toString(self) -> str: ...
    
    
    class Type:
        NOTE = 'NOTE'
        TRANSACTION = 'TRANSACTION'
        
        def __init__(self): ...
        
        def code(self) -> int: ...
        
        @staticmethod
        def typeForCode(i: int) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    
class ReminderListener:
    def __init__(self): ...
    
    def reminderAdded(self, reminder: Reminder) -> None: ...
    
    def reminderModified(self, reminder: Reminder) -> None: ...
    
    def reminderRemoved(self, reminder: Reminder) -> None: ...
    
    
class ReminderSet:
    def __init__(self, accountBook: AccountBook): ...
    
    def addReminder(self, reminder: Reminder) -> None: ...
    
    def addReminderListener(self, reminderListener: ReminderListener) -> None: ...
    
    def autoCommitReminders(self) -> None: ...
    
    def getAccountBook(self) -> AccountBook: ...
    
    def getAllReminders(self) -> List[Reminder]: ...
    
    def getEventsInDay(self, j: 'java.util.Calendar') -> List[Reminder]: ...
    
    def getOverdueItems(self, j: 'java.util.Calendar') -> List[DateReminderPair]: ...
    
    def getRemindersOnDay(self, j: 'java.util.Calendar') -> List[Reminder]: ...
    
    def removeReminder(self, reminder: Reminder) -> None: ...
    
    def removeReminderListener(self, reminderListener: ReminderListener) -> None: ...
    
    
class ReportSpec(MoneydanceSyncableItem):
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    MD_SHOWGRAPH = u'showgraph'
    MD_SHOWREPORT = u'showreport'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SYNCABLE_TYPE_VALUE = u'mem_rpt'
    
    def __init__(self, accountBook: AccountBook): ...
    
    def getMemorizedCopy(self) -> 'ReportSpec': ...
    
    def getName(self) -> str: ...
    
    def getReportGenerator(self) -> str: ...
    
    def getReportID(self) -> str: ...
    
    def getReportParameters(self) -> com.infinitekind.tiksync.SyncRecord: ...
    
    def getSyncItemType(self) -> str: ...
    
    def isMemorized(self) -> bool: ...
    
    def setMemorized(self, b: bool) -> None: ...
    
    def setName(self, s: str) -> None: ...
    
    def setReportGenerator(self, s: str) -> None: ...
    
    def setReportID(self, s: str) -> None: ...
    
    def setReportParameters(self, c: com.infinitekind.tiksync.SyncRecord) -> None: ...
    
    def toString(self) -> str: ...
    
    
    class ReportGenerator:
        ACCBALANCE_G = 'ACCBALANCE_G'
        ACCBALANCE_T = 'ACCBALANCE_T'
        ASSETALLOCATE_G = 'ASSETALLOCATE_G'
        ASSETALLOCATE_T = 'ASSETALLOCATE_T'
        BUDGET_T = 'BUDGET_T'
        CAPGAINS_T = 'CAPGAINS_T'
        CASHFLOW_T = 'CASHFLOW_T'
        COSTBASIS_T = 'COSTBASIS_T'
        CURRENCY_G = 'CURRENCY_G'
        DETAILEDCASHFLOW_T = 'DETAILEDCASHFLOW_T'
        DETAILEDINCEXP_T = 'DETAILEDINCEXP_T'
        DETAILEDXFER_T = 'DETAILEDXFER_T'
        EXPENSES_G = 'EXPENSES_G'
        INCEXP_T = 'INCEXP_T'
        INCOME_EXPENSE_G = 'INCOME_EXPENSE_G'
        INCOME_G = 'INCOME_G'
        INVESTPERF_T = 'INVESTPERF_T'
        INVSEARCH_T = 'INVSEARCH_T'
        MISSCHECKS_T = 'MISSCHECKS_T'
        NETWORTH_G = 'NETWORTH_G'
        NETWORTH_T = 'NETWORTH_T'
        PORTFOLIO_T = 'PORTFOLIO_T'
        RECONCILIATION_T = 'RECONCILIATION_T'
        SEARCH_T = 'SEARCH_T'
        SECPERF_G = 'SECPERF_G'
        SECURITY_HISTORY_T = 'SECURITY_HISTORY_T'
        TAGTOTAL_T = 'TAGTOTAL_T'
        TXN_T = 'TXN_T'
        VAT_T = 'VAT_T'
        XFER_T = 'XFER_T'
        
        def __init__(self): ...
        
        def getLongID(self) -> str: ...
        
        def getReportType(self) -> str: ...
        
        def getShortID(self) -> str: ...
        
        @staticmethod
        def reportTypeForID(s: str) -> str: ...
        
        @staticmethod
        def reportTypeForLegacyID(s: str) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    class Type:
        GRAPH = 'GRAPH'
        TEXT = 'TEXT'
        
        def __init__(self): ...
        
        def asString(self) -> str: ...
        
        @staticmethod
        def typeFromString(s: str) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    
class ReportSpecManager:
    def __init__(self, accountBook: AccountBook): ...
    
    def addListener(self, memorizedItemListener: MemorizedItemListener) -> None: ...
    
    def getAllGraphs(self) -> List[ReportSpec]: ...
    
    def getAllItems(self) -> List[ReportSpec]: ...
    
    def getAllMemorizedItems(self) -> List[ReportSpec]: ...
    
    def getAllReports(self) -> List[ReportSpec]: ...
    
    def getMemorizedGraphs(self) -> List[ReportSpec]: ...
    
    def getMemorizedItems(self, s: str, b: bool) -> List[ReportSpec]: ...
    
    def getMemorizedReports(self) -> List[ReportSpec]: ...
    
    def removeListener(self, memorizedItemListener: MemorizedItemListener) -> None: ...
    
    
class SecurityType('java.lang.Enum'):
    BOND = 'BOND'
    CD = 'CD'
    CONFIG_KEY = u'sec_type'
    DEFAULT = 'STOCK'
    MUTUAL = 'MUTUAL'
    OPTION = 'OPTION'
    OTHER = 'OTHER'
    STOCK = 'STOCK'
    
    def __init__(self): ...
    
    @staticmethod
    def fromInt(i: int) -> 'SecurityType': ...
    
    def getResourceKey(self) -> str: ...
    
    @staticmethod
    def valueOf(s: str) -> 'SecurityType': ...
    
    @staticmethod
    def values() -> List['SecurityType']: ...
    
    
class SplitTxn(AbstractTxn):
    BANK_TRANSACTION_TYPE = 0
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    PRINT_CHECKNUM_PREFIX = u'{'
    PRINT_CHECKNUM_SUFFIX = u'}'
    SECURITY_SUBTYPES_ITEM_TYPE = u'secsubtypes'
    SPLIT_TRANSACTION_TYPE = 1
    STATUS_CLEARED = 20
    STATUS_RECONCILING = 30
    STATUS_UNRECONCILED = 40
    TAG_FITID_PREFIX = u'ol_fitid_'
    TAG_FI_ID = u'ol_fi_id'
    TAG_INVST_SPLIT_EXP = u'exp'
    TAG_INVST_SPLIT_FEE = u'fee'
    TAG_INVST_SPLIT_INC = u'inc'
    TAG_INVST_SPLIT_SEC = u'sec'
    TAG_INVST_SPLIT_TYPE = u'invest.splittype'
    TAG_INVST_SPLIT_XFR = u'xfr'
    TAG_INVST_TXN_TYPE = u'invest.txntype'
    TAG_IS_NEW_TXN = u'ol.match-status'
    TAG_ONLINE_PMT_ID = u'ol_pmtid'
    TAG_QIF_IMPORT_SESSION = u'qif_sn'
    TAG_QIF_INVST_ACTION = u'qif_invst_action'
    TAG_RECON_ASOFDT = u'rec_asof'
    TAG_RECON_DATE = u'rec_dt'
    TAG_SPLIT_ADDED = u'split_added'
    TAG_SPLIT_AMOUNT = u'split_amount'
    TAG_SPLIT_CALC = u'split_calc'
    TAG_SPLIT_PAIR = u'split_pair'
    TRANSFER_TYPE_BANK = u'xfrtp_bank'
    TRANSFER_TYPE_BUYSELL = u'xfrtp_buysell'
    TRANSFER_TYPE_BUYSELLXFR = u'xfrtp_buysellxfr'
    TRANSFER_TYPE_DIVIDEND = u'xfrtp_dividend'
    TRANSFER_TYPE_DIVIDENDXFR = u'xfrtp_dividendxfr'
    TRANSFER_TYPE_MISCINCEXP = u'xfrtp_miscincexp'
    TRANSFER_TYPE_SHORTCOVER = u'xfrtp_shortcover'
    
    def __init__(self, parentTxn: ParentTxn): ...
    
    def deleteItem(self) -> bool: ...
    
    def getAmount(self) -> int: ...
    
    def getCheckNumber(self) -> str: ...
    
    def getClearedStatus(self) -> str: ...
    
    def getDateEntered(self) -> int: ...
    
    def getDateInt(self) -> int: ...
    
    def getFlipSide(self) -> Txn: ...
    
    def getOtherTxn(self, i: int) -> AbstractTxn: ...
    
    def getOtherTxnCount(self) -> int: ...
    
    def getParentAmount(self) -> int: ...
    
    def getParentTxn(self) -> ParentTxn: ...
    
    def getParentValue(self) -> int: ...
    
    def getRate(self) -> float: ...
    
    def getTaxDateInt(self) -> int: ...
    
    def getTransferType(self) -> str: ...
    
    def getValue(self) -> int: ...
    
    def isTransferTo(self, account: Account) -> bool: ...
    
    @staticmethod
    def makeSplitTxn(parentTxn: ParentTxn, i: int, f: float, account: Account, s: str, i2: int, i3: int) -> 'SplitTxn': ...
    
    def negateAmount(self) -> None: ...
    
    def setAmount(self, i: int) -> None: ...
    
    def setCheckNumber(self, s: str) -> None: ...
    
    def setParentAmount(self, f: float, i: int) -> None: ...
    
    def takeAmounts(self, splitTxn: 'SplitTxn') -> None: ...
    
    def takeValuesFrom(self, splitTxn: 'SplitTxn') -> None: ...
    
    def toString(self) -> str: ...
    
    
class TotalAmount:
    def __init__(self, currencyType: CurrencyType): ...
    
    def convertToCurrency(self, currencyType: CurrencyType) -> 'TotalAmount': ...
    
    def duplicate(self) -> 'TotalAmount': ...
    
    def getAmount(self) -> int: ...
    
    def incrementBy(self, totalAmount: 'TotalAmount') -> None: ...
    
    
class TransactionListener:
    def __init__(self): ...
    
    def transactionAdded(self, abstractTxn: AbstractTxn) -> None: ...
    
    def transactionModified(self, abstractTxn: AbstractTxn) -> None: ...
    
    def transactionRemoved(self, abstractTxn: AbstractTxn) -> None: ...
    
    
class TransactionSet(Iterable):
    def __init__(self, accountBook: AccountBook): ...
    
    def addNewTxn(self, parentTxn: ParentTxn) -> None: ...
    
    def addTransactionListener(self, transactionListener: TransactionListener) -> None: ...
    
    def findBestMatch(self, s: str, i: int, account: Account) -> ParentTxn: ...
    
    def getAllTxns(self) -> 'TxnSet': ...
    
    def getListOfTxnNodes(self, txnSearch: TxnSearch) -> List[Txn]: ...
    
    def getTransactionCount(self) -> int: ...
    
    def getTransactions(self, txnSearch: TxnSearch) -> 'TxnSet': ...
    
    def getTransactionsForAccount(self, account: Account) -> 'TxnSet': ...
    
    def getTxnByID(self, s: str) -> AbstractTxn: ...
    
    def getTxnByLegacyID(self, i: int) -> AbstractTxn: ...
    
    def getTxnsForAccount(self, account: Account) -> List[AbstractTxn]: ...
    
    def hasTxnsForAccount(self, account: Account) -> bool: ...
    
    def isDirty(self) -> bool: ...
    
    def iterableTxns(self) -> Iterable[AbstractTxn]: ...
    
    def iterator(self) -> Iterator[AbstractTxn]: ...
    
    def loadTxn(self, parentTxn: ParentTxn) -> None: ...
    
    def matchPayee(self, account: Account, s: str, b: bool, i: int) -> List[ParentTxn]: ...
    
    def matchSplitPayee(self, account: Account, s: str, b: bool, i: int) -> List[SplitTxn]: ...
    
    def removeAll(self) -> None: ...
    
    def removeTransactionListener(self, transactionListener: TransactionListener) -> None: ...
    
    def removeTxn(self, abstractTxn: AbstractTxn) -> None: ...
    
    def resetDirtyFlags(self) -> None: ...
    
    def setDirty(self) -> None: ...
    
    def txnModified(self, abstractTxn: AbstractTxn) -> None: ...
    
    
class TxnFilter:
    def __init__(self): ...
    
    def containsTxn(self, abstractTxn: AbstractTxn) -> bool: ...
    
    
class TxnIterator(Iterator):
    def __init__(self, transactionSet: TransactionSet): ...
    
    def hasNext(self) -> bool: ...
    
    def next(self) -> object: ...
    
    def remove(self) -> None: ...
    
    
class TxnSet(Iterable):
    def __init__(self): ...
    
    def addAll(self, sequence: Sequence[AbstractTxn]) -> None: ...
    
    def addTxn(self, abstractTxn: AbstractTxn) -> None: ...
    
    def cloneTxns(self) -> 'TxnSet': ...
    
    def contains(self, abstractTxn: AbstractTxn) -> bool: ...
    
    def copyInto(self, txnSet: 'TxnSet') -> None: ...
    
    def getBalanceAt(self, i: int) -> int: ...
    
    def getLastTxn(self) -> AbstractTxn: ...
    
    def getSize(self) -> int: ...
    
    def getTxn(self, i: int) -> AbstractTxn: ...
    
    def getTxnAt(self, i: int) -> AbstractTxn: ...
    
    def getTxnByID(self, s: str) -> AbstractTxn: ...
    
    def getTxnByLegacyID(self, i: int) -> AbstractTxn: ...
    
    def indexOf(self, abstractTxn: AbstractTxn) -> int: ...
    
    def insertTxnAt(self, abstractTxn: AbstractTxn, i: int) -> None: ...
    
    def iterator(self) -> Iterator[AbstractTxn]: ...
    
    def recalcBalances(self, i: int, b: bool) -> None: ...
    
    def removeAll(self, sequence: Sequence[AbstractTxn]) -> None: ...
    
    def removeAllTxns(self) -> None: ...
    
    def removeTxn(self, abstractTxn: AbstractTxn) -> bool: ...
    
    def removeTxnAt(self, i: int) -> None: ...
    
    def setHoldBalances(self, b: bool) -> None: ...
    
    def setTxnAt(self, abstractTxn: AbstractTxn, i: int) -> None: ...
    
    def sortByField(self, i: int) -> None: ...
    
    def sortWithComparator(self, callable: Callable[[AbstractTxn, AbstractTxn], int]) -> None: ...
    
    def swap(self, i: int, i2: int) -> None: ...
    
    def toArray(self) -> List[AbstractTxn]: ...
    
    
class TxnSortOrder('java.lang.Enum', 'java.util.Comparator'):
    ACCOUNT = 'ACCOUNT'
    ACTION = 'ACTION'
    AMOUNT = 'AMOUNT'
    CATEGORY = 'CATEGORY'
    CHECKNUM = 'CHECKNUM'
    CHECKNUM_INT = 'CHECKNUM_INT'
    CHECKNUM_PARENT = 'CHECKNUM_PARENT'
    DATE = 'DATE'
    DATE_ENTERED = 'DATE_ENTERED'
    DATE_THEN_AMOUNT = 'DATE_THEN_AMOUNT'
    DATE_THEN_CHECKNUM = 'DATE_THEN_CHECKNUM'
    DATE_THEN_STATUS = 'DATE_THEN_STATUS'
    DESCRIPTION = 'DESCRIPTION'
    REVERSE_ACCOUNT = 'REVERSE_ACCOUNT'
    REVERSE_AMOUNT = 'REVERSE_AMOUNT'
    REVERSE_CATEGORY = 'REVERSE_CATEGORY'
    REVERSE_CHECKNUM = 'REVERSE_CHECKNUM'
    REVERSE_CHECKNUM_INT = 'REVERSE_CHECKNUM_INT'
    REVERSE_CHECKNUM_PARENT = 'REVERSE_CHECKNUM_PARENT'
    REVERSE_DATE = 'REVERSE_DATE'
    REVERSE_DATE_ENTERED = 'REVERSE_DATE_ENTERED'
    REVERSE_DATE_THEN_AMOUNT = 'REVERSE_DATE_THEN_AMOUNT'
    REVERSE_DATE_THEN_CHECKNUM = 'REVERSE_DATE_THEN_CHECKNUM'
    REVERSE_DATE_THEN_STATUS = 'REVERSE_DATE_THEN_STATUS'
    REVERSE_DESCRIPTION = 'REVERSE_DESCRIPTION'
    REVERSE_STATUS_THEN_CKNUM = 'REVERSE_STATUS_THEN_CKNUM'
    REVERSE_STATUS_THEN_DATE = 'REVERSE_STATUS_THEN_DATE'
    REVERSE_TAXDATE_THEN_CHECKNUM = 'REVERSE_TAXDATE_THEN_CHECKNUM'
    STATUS_THEN_CKNUM = 'STATUS_THEN_CKNUM'
    STATUS_THEN_DATE = 'STATUS_THEN_DATE'
    TAXDATE_THEN_CHECKNUM = 'TAXDATE_THEN_CHECKNUM'
    
    def __init__(self): ...
    
    def compare(self, abstractTxn: AbstractTxn, abstractTxn2: AbstractTxn) -> int: ...
    
    @staticmethod
    def defaultDateOrder() -> 'TxnSortOrder': ...
    
    def derivedOrder(self, b: bool) -> 'TxnSortOrder': ...
    
    @staticmethod
    def fromFieldID(s: str, b: bool) -> 'TxnSortOrder': ...
    
    @staticmethod
    def fromInt(i: int, b: bool) -> 'TxnSortOrder': ...
    
    def getAscendingOrder(self) -> 'TxnSortOrder': ...
    
    def getComparator(self) -> Callable[[Txn, Txn], int]: ...
    
    def getDescendingOrder(self) -> 'TxnSortOrder': ...
    
    def getFieldID(self) -> str: ...
    
    def getInvertedOrder(self) -> 'TxnSortOrder': ...
    
    def getLegacyID(self) -> int: ...
    
    def isAscending(self) -> bool: ...
    
    def isDateOrder(self) -> bool: ...
    
    @staticmethod
    def valueOf(s: str) -> 'TxnSortOrder': ...
    
    @staticmethod
    def values() -> List['TxnSortOrder']: ...
    
    
class TxnUtil:
    ACCOUNT_JUST_NAME_COMPARATOR = 'acctname_comparator'
    ACCOUNT_THEN_DATE_COMPARATOR = 'acct/date_comparator'
    ALL_TXN_TYPES = "array('i', [0, 2, 1, 3, 5, 11, 8, 6, 7, 9, 10, 4])"
    AMOUNT_COMPARATOR = 'amt_comparator'
    CATEGORY_COMPARATOR = 'category_comparator'
    CATEGORY_DATE_AMOUNT_COMPARATOR = 'category_date_amt_comparator'
    CATEGORY_THEN_DATE_COMPARATOR = 'cat/date_comparator'
    CHECKNUM_COMPARATOR = 'checknum_comparator'
    CHECKNUM_NUMERIC_COMPARATOR = 'checknum_numeric_comparator'
    CHECKNUM_PARENT_COMPARATOR = 'checknum/parent_comparator'
    DATE_COMPARATOR = 'date_comparator'
    DATE_ENTERED_COMPARATOR = 'date_entered_comparator'
    DATE_THEN_AMOUNT_COMPARATOR = 'date/amt_comparator'
    DATE_THEN_AMOUNT_TXN_COMPARATOR = 'date/amt_txncomparator'
    DATE_THEN_CHECKNUM_COMPARATOR = 'date/chknum_comparator'
    DATE_THEN_STATUS_COMPARATOR = 'date/status_comparator'
    DEBUG = False
    DEFAULT_COMPARATOR = 'status/dateentered_comparator'
    DESCRIPTION_COMPARATOR = 'desc_comparator'
    DESCRIPTION_DATE_AMOUNT_COMPARATOR = 'desc_date_amt_comparator'
    STATUS_CHECKNUM_COMPARATOR = 'status/checknum_comparator'
    STATUS_THEN_DATE_ENTERED_COMPARATOR = 'status/dateentered_comparator'
    TAXDATE_THEN_CHECKNUM_COMPARATOR = 'taxdate/checknum_comparator'
    TXN_TYPE_BANK = 4
    TXN_TYPE_BUY = 0
    TXN_TYPE_BUY_XFER = 2
    TXN_TYPE_COVER = 7
    TXN_TYPE_DIVIDEND = 5
    TXN_TYPE_DIVIDENDXFR = 8
    TXN_TYPE_DIVIDEND_REINVEST = 11
    TXN_TYPE_MISCEXP = 10
    TXN_TYPE_MISCINC = 9
    TXN_TYPE_SELL = 1
    TXN_TYPE_SELL_XFER = 3
    TXN_TYPE_SHORT = 6
    
    def __init__(self): ...
    
    @staticmethod
    def applyVAT(parentTxn: ParentTxn) -> None: ...
    
    @staticmethod
    def comparatorForField(i: int) -> Callable[[AbstractTxn, AbstractTxn], int]: ...
    
    @staticmethod
    def copyFromSimilarPreviousTxn(parentTxn: ParentTxn, parentTxn2: ParentTxn, b: bool) -> None: ...
    
    @staticmethod
    def copyVATInfo(abstractTxn: AbstractTxn, abstractTxn2: AbstractTxn) -> None: ...
    
    @staticmethod
    def findVATGSTSplit(parentTxn: ParentTxn, splitTxn: SplitTxn) -> SplitTxn: ...
    
    @staticmethod
    def getCommissionPart(parentTxn: ParentTxn) -> SplitTxn: ...
    
    @staticmethod
    def getCorrespondingDuplicate(parentTxn: ParentTxn, abstractTxn: AbstractTxn) -> AbstractTxn: ...
    
    @staticmethod
    def getExpensePart(parentTxn: ParentTxn) -> SplitTxn: ...
    
    @staticmethod
    def getIncomePart(parentTxn: ParentTxn) -> SplitTxn: ...
    
    @staticmethod
    def getInvestTxnType(parentTxn: ParentTxn) -> InvestTxnType: ...
    
    @staticmethod
    def getInvstTxnType(parentTxn: ParentTxn) -> int: ...
    
    @staticmethod
    def getKeywordsAsString(list: List[str]) -> str: ...
    
    @staticmethod
    def getListOfAllNonNumericCheckNumbers(accountBook: AccountBook, account: Account) -> List[str]: ...
    
    @staticmethod
    def getListOfAllUsedTransactionTags(txnSet: TxnSet) -> List[str]: ...
    
    @staticmethod
    def getNumShares(splitTxn: SplitTxn) -> int: ...
    
    @staticmethod
    def getSearch(dateRange: DateRange) -> TxnSearch: ...
    
    @staticmethod
    def getSecurityPart(parentTxn: ParentTxn) -> SplitTxn: ...
    
    @staticmethod
    def getTxnByID(transactionSet: TransactionSet, s: str) -> AbstractTxn: ...
    
    @staticmethod
    def getXfrPart(parentTxn: ParentTxn) -> SplitTxn: ...
    
    @staticmethod
    def markOnlineTxnsAsOf(iterator: Iterator[AbstractTxn], i: int, i2: int) -> None: ...
    
    @staticmethod
    def mediaTypeForFilename(s: str) -> MediaType: ...
    
    @staticmethod
    def parseCostBasisTag(splitTxn: SplitTxn) -> Dict[str,int]: ...
    
    @staticmethod
    def setCommissionPart(splitTxn: SplitTxn) -> None: ...
    
    @staticmethod
    def setExpensePart(splitTxn: SplitTxn) -> None: ...
    
    @staticmethod
    def setIncomePart(splitTxn: SplitTxn) -> None: ...
    
    @staticmethod
    def setInvstTxnType(parentTxn: ParentTxn, investTxnType: InvestTxnType) -> None: ...
    
    @staticmethod
    def setRatesInTxn(abstractTxn: AbstractTxn) -> None: ...
    
    @staticmethod
    def setSecurityPart(splitTxn: SplitTxn) -> None: ...
    
    @staticmethod
    def setXfrPart(splitTxn: SplitTxn) -> None: ...
    
    @staticmethod
    def txnIsClearedForArchiving(abstractTxn: AbstractTxn) -> bool: ...
    
    @staticmethod
    def txnTouchesInvestment(abstractTxn: AbstractTxn) -> bool: ...
    
    @staticmethod
    def wasTxnDownloaded(abstractTxn: AbstractTxn) -> bool: ...
    
    
class UndoManagerInterface:
    def __init__(self): ...
    
    def addItems(self, list: List[MoneydanceSyncableItem]) -> List[MoneydanceSyncableItem]: ...
    
    def deleteItems(self, list: List[MoneydanceSyncableItem]) -> None: ...
    
    def modifyItems(self, list: List[MoneydanceSyncableItem], list2: List[MoneydanceSyncableItem]) -> None: ...
    
    
