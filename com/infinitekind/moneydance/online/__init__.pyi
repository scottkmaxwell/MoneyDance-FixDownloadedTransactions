from typing import List
import com.infinitekind.moneydance.model


class ErrorMessage:
    def __init__(self, i: int, s: str, s2: str): ...
    
    def getAccount(self) -> com.infinitekind.moneydance.model.OnlineAccountProxy: ...
    
    def getErrorCode(self) -> int: ...
    
    def getErrorMessage(self) -> str: ...
    
    def getFI(self) -> com.infinitekind.moneydance.model.OnlineService: ...
    
    def getLocalMessageKey(self) -> str: ...
    
    def toString(self) -> str: ...
    
    
class OFXAuthInfo:
    AUTH_TYPE_ANONYMOUS = 3
    AUTH_TYPE_FIXED = 0
    AUTH_TYPE_HWTOKEN = 2
    AUTH_TYPE_ONETIME = 1
    cacheKey = '<reflected field public java.lang.String com.infinitekind.moneydance.online.OFXAuthInfo.cacheKey at 0x30>'
    
    def __init__(self): ...
    
    @staticmethod
    def fromCacheString(s: str) -> 'OFXAuthInfo': ...
    
    def getAuthType(self) -> int: ...
    
    def getExtraAuth(self) -> str: ...
    
    def getPasswd(self) -> str: ...
    
    def getUserId(self) -> str: ...
    
    def hasExtraAuth(self) -> bool: ...
    
    def toCacheString(self) -> str: ...
    
    def toString(self) -> str: ...
    
    
class OnlineBankingUI:
    def __init__(self): ...
    
    def authenticateUser(self, c: com.infinitekind.moneydance.model.OnlineService, s: str, c2: com.infinitekind.moneydance.model.OnlineAccountProxy) -> OFXAuthInfo: ...
    
    def getClientUID(self, c: com.infinitekind.moneydance.model.OnlineService, oFXAuthInfo: OFXAuthInfo) -> str: ...
    
    def getResourceString(self, s: str) -> str: ...
    
    def getShortDateFormat(self) -> 'java.text.DateFormat': ...
    
    def matchSecurity(self, c: com.infinitekind.moneydance.model.OnlineService, s: str, s2: str, s3: str) -> com.infinitekind.moneydance.model.CurrencyType: ...
    
    def receivedStatement(self, c: com.infinitekind.moneydance.model.OnlineAccountProxy) -> None: ...
    
    def recordUndoableChange(self, list: List[com.infinitekind.moneydance.model.MoneydanceSyncableItem], list2: List[com.infinitekind.moneydance.model.MoneydanceSyncableItem]) -> None: ...
    
    def selectBankAccount(self, c: com.infinitekind.moneydance.model.OnlineService, s: str) -> com.infinitekind.moneydance.model.OnlineAccountProxy: ...
    
    def selectCreditCardAccount(self, c: com.infinitekind.moneydance.model.OnlineService, s: str) -> com.infinitekind.moneydance.model.OnlineAccountProxy: ...
    
    def selectInvestmentAccount(self, c: com.infinitekind.moneydance.model.OnlineService, s: str) -> com.infinitekind.moneydance.model.OnlineAccountProxy: ...
    
    def showOFXError(self, errorMessage: ErrorMessage) -> None: ...
    
    
class OnlineTxnMerger:
    DEBUG = False
    MATCH_TYPE_TAG = u'ol.match-type'
    NEWER_ONLINE_TXN_DATE_THRESHOLD = 100
    OLDER_ONLINE_TXN_DATE_THRESHOLD = 14
    ORIG_MEMO_TAG = u'ol.orig-memo'
    ORIG_PAYEE_TAG = u'ol.orig-payee'
    SIMILARITY_DEFAULT_THRESHOLD = 90
    SIMILARITY_SUGGESTION_THRESHOLD = 60
    XFR_MATCH_THRESHHOLD = 105
    
    def __init__(self, onlineBankingUI: OnlineBankingUI, c: com.infinitekind.moneydance.model.Account): ...
    
    def addOnlineTxnWithoutMerging(self, c: com.infinitekind.moneydance.model.OnlineTxn, b: bool) -> None: ...
    
    def createDefaultNewTxn(self, c: com.infinitekind.moneydance.model.OnlineTxn) -> com.infinitekind.moneydance.model.ParentTxn: ...
    
    @staticmethod
    def findMatchedTxn(c: com.infinitekind.moneydance.model.OnlineTxn, c2: com.infinitekind.moneydance.model.Account) -> com.infinitekind.moneydance.model.AbstractTxn: ...
    
    def findMatches(self, c: com.infinitekind.moneydance.model.OnlineTxn, c2: com.infinitekind.moneydance.model.AbstractTxn, l: list) -> None: ...
    
    def findSimilarPreviousTxns(self, c: com.infinitekind.moneydance.model.AbstractTxn, l: list) -> None: ...
    
    @staticmethod
    def findTxnByFIID(s: str, i: int, c: com.infinitekind.moneydance.model.Account) -> com.infinitekind.moneydance.model.AbstractTxn: ...
    
    def gatherMyOptions(self, c: com.infinitekind.moneydance.model.OnlineTxn, c2: com.infinitekind.moneydance.model.AbstractTxn, l: list) -> None: ...
    
    def getMatchingAction(self, c: com.infinitekind.moneydance.model.AbstractTxn) -> str: ...
    
    def getOnlineDateThreshold(self) -> int: ...
    
    def getRevertAction(self, c: com.infinitekind.moneydance.model.OnlineTxn, c2: com.infinitekind.moneydance.model.AbstractTxn) -> str: ...
    
    def getShouldAutocreateCategories(self) -> bool: ...
    
    def getShouldConfirmTransactions(self) -> bool: ...
    
    def getShouldMergeTransactions(self) -> bool: ...
    
    def isMarkConfirmedTxnsAsCleared(self) -> bool: ...
    
    def isPreferBankProvidedDates(self) -> bool: ...
    
    def mergeOnlineTxn(self, c: com.infinitekind.moneydance.model.OnlineTxn) -> None: ...
    
    def mergeTransactionsIntoRegister(self, list: List[com.infinitekind.moneydance.model.OnlineTxn]) -> List[com.infinitekind.moneydance.model.OnlineTxn]: ...
    
    def setMarkConfirmedTxnsAsCleared(self, b: bool) -> None: ...
    
    def setOnlineDateThreshold(self, i: int) -> None: ...
    
    def setPreferBankProvidedDates(self, b: bool) -> None: ...
    
    def setShouldAutocreateCategories(self, b: bool) -> None: ...
    
    def setShouldConfirmTransactions(self, b: bool) -> None: ...
    
    def setShouldMergeTransactions(self, b: bool) -> None: ...
    
    @staticmethod
    def stringForMatchType(s: str) -> str: ...
    
    def unmergeTxn(self, c: com.infinitekind.moneydance.model.AbstractTxn, s: str) -> str: ...
    
    
    class DownloadedTxnAction:
        def __init__(self, onlineTxnMerger: 'OnlineTxnMerger'): ...
        
        def compareTo(self, o: object) -> int: ...
        
        def describeMatchOption(self, onlineBankingUI: OnlineBankingUI) -> str: ...
        
        def getMatchType(self) -> str: ...
        
        def getMatchingTxn(self) -> com.infinitekind.moneydance.model.AbstractTxn: ...
        
        def getScore(self) -> float: ...
        
        def isDefault(self) -> bool: ...
        
        def isMergeAction(self) -> bool: ...
        
        def record(self, b: bool) -> None: ...
        
        def toDetailedString(self) -> str: ...
        
        
    class SplitTxnCopier:
        def __init__(self): ...
        
        @staticmethod
        def adjustValue(c: com.infinitekind.moneydance.model.ParentTxn, i: int) -> None: ...
        
        @staticmethod
        def copySplits(c: com.infinitekind.moneydance.model.ParentTxn, c2: com.infinitekind.moneydance.model.ParentTxn) -> None: ...
        
        
    class TxnCleanup:
        originalTxn = '<reflected field public com.infinitekind.moneydance.model.AbstractTxn com.infinitekind.moneydance.online.OnlineTxnMerger$TxnCleanup.originalTxn at 0x31>'
        suggestedSimilarTxn = '<reflected field public com.infinitekind.moneydance.model.AbstractTxn com.infinitekind.moneydance.online.OnlineTxnMerger$TxnCleanup.suggestedSimilarTxn at 0x32>'
        txn = '<reflected field public com.infinitekind.moneydance.model.AbstractTxn com.infinitekind.moneydance.online.OnlineTxnMerger$TxnCleanup.txn at 0x33>'
        
        def __init__(self, onlineTxnMerger: 'OnlineTxnMerger', c: com.infinitekind.moneydance.model.AbstractTxn, c2: com.infinitekind.moneydance.model.AbstractTxn, f: float): ...
        
        def describeMatchOption(self, onlineBankingUI: OnlineBankingUI) -> str: ...
        
        def getMatchType(self) -> str: ...
        
        def getMatchingTxn(self) -> com.infinitekind.moneydance.model.AbstractTxn: ...
        
        def getTxn(self) -> com.infinitekind.moneydance.model.AbstractTxn: ...
        
        def record(self, b: bool) -> None: ...
        
        def toAbbreviatedString(self) -> str: ...
        
        def toDetailedString(self) -> str: ...
        
        def toString(self) -> str: ...
        
        
    class TxnMatch:
        matchType = '<reflected field public com.infinitekind.moneydance.online.OnlineTxnMerger$TxnMatchType com.infinitekind.moneydance.online.OnlineTxnMerger$TxnMatch.matchType at 0x34>'
        onlineTxn = '<reflected field public com.infinitekind.moneydance.model.OnlineTxn com.infinitekind.moneydance.online.OnlineTxnMerger$TxnMatch.onlineTxn at 0x35>'
        registerTxn = '<reflected field public com.infinitekind.moneydance.model.AbstractTxn com.infinitekind.moneydance.online.OnlineTxnMerger$TxnMatch.registerTxn at 0x36>'
        txn = '<reflected field public com.infinitekind.moneydance.model.AbstractTxn com.infinitekind.moneydance.online.OnlineTxnMerger$TxnMatch.txn at 0x37>'
        
        def __init__(self): ...
        
        def describeMatchOption(self, onlineBankingUI: OnlineBankingUI) -> str: ...
        
        def getMatchType(self) -> str: ...
        
        def getMatchingTxn(self) -> com.infinitekind.moneydance.model.AbstractTxn: ...
        
        def isMergeAction(self) -> bool: ...
        
        def record(self) -> None: ...
        
        def shouldMarkAsRead(self) -> bool: ...
        
        def shouldRecordUponImport(self) -> bool: ...
        
        def toDetailedString(self) -> str: ...
        
        def toString(self) -> str: ...
        
        
    class TxnMatchType:
        CORRECTION = 'CORRECTION'
        DELETION = 'DELETION'
        EXACT_MERGE = 'EXACT_MERGE'
        NO_MATCH = 'NO_MATCH'
        POSSIBLE_MERGE = 'POSSIBLE_MERGE'
        REVERT = 'REVERT'
        SIMILAR_MATCH = 'SIMILAR_MATCH'
        
        def __init__(self): ...
        
        def matchTypeCode(self) -> int: ...
        
        @staticmethod
        def valueForString(s: str) -> str: ...
        
        @staticmethod
        def valueOf(s: str) -> str: ...
        
        @staticmethod
        def values() -> List[str]: ...
        
        
    
