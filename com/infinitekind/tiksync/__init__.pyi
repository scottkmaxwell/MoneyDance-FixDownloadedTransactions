from typing import List


class CountingInputStream('java.io.InputStream'):
    def __init__(self, j: 'java.io.InputStream'): ...
    
    def available(self) -> int: ...
    
    def close(self) -> None: ...
    
    def getByteCount(self) -> int: ...
    
    def mark(self, i: int) -> None: ...
    
    def markSupported(self) -> bool: ...
    
    def read(self) -> int: ...
    
    def reset(self) -> None: ...
    
    def skip(self, i: int) -> int: ...
    
    
class SyncDelegate:
    def __init__(self): ...
    
    def performPostSyncProcessing(self, syncStorage: 'SyncStorage', syncFolder: 'SyncFolder') -> None: ...
    
    def performPreSyncProcessing(self, syncStorage: 'SyncStorage', syncFolder: 'SyncFolder') -> None: ...
    
    def shouldKeepTxnFiles(self) -> bool: ...
    
    def shouldSyncAttachments(self) -> bool: ...
    
    
class SyncFolder:
    def __init__(self): ...
    
    def createParents(self) -> None: ...
    
    def delete(self, s: str) -> None: ...
    
    def encryptBytes(self, list: List[int]) -> List[int]: ...
    
    def exists(self, s: str) -> bool: ...
    
    def getModified(self, s: str) -> 'java.util.Date': ...
    
    def listFiles(self, s: str) -> List[str]: ...
    
    def listSubfolders(self, s: str) -> List[str]: ...
    
    def readFile(self, s: str) -> 'java.io.InputStream': ...
    
    def readUnencrypted(self, s: str) -> 'java.io.InputStream': ...
    
    def writeFile(self, s: str, j: 'java.io.InputStream') -> None: ...
    
    def writeUnencryptedFile(self, s: str, j: 'java.io.InputStream') -> None: ...
    
    
class SyncListener:
    def __init__(self): ...
    
    def didProcessIncomingUpdates(self) -> None: ...
    
    def willProcessIncomingUpdates(self) -> None: ...
    
    
class SyncRecord(dict):
    def __init__(self): ...
    
    def clone(self) -> object: ...
    
    @staticmethod
    def createFrom(l: list) -> 'SyncRecord': ...
    
    def fromkeys(self): ...
    
    def getBoolean(self, s: str, b: bool) -> bool: ...
    
    def getByteArray(self, s: str) -> List[int]: ...
    
    def getDouble(self, s: str, f: float) -> float: ...
    
    def getInt(self, s: str, i: int) -> int: ...
    
    def getIntArray(self, s: str) -> List[int]: ...
    
    def getLabel(self) -> str: ...
    
    def getLong(self, s: str, i: int) -> int: ...
    
    def getStr(self, s: str, s2: str) -> str: ...
    
    def getString(self, s: str, s2: str) -> str: ...
    
    def getStringList(self, s: str) -> List[str]: ...
    
    def getSublist(self, s: str) -> List['SyncRecord']: ...
    
    def getSubset(self, s: str) -> 'SyncRecord': ...
    
    def printHumanReadableContents(self, j: 'java.io.PrintStream') -> None: ...
    
    def put(self, s: str, i: int) -> None: ...
    
    def putAllFromMap(self, d: dict, list: List[object]) -> None: ...
    
    def putInline(self, s: str, syncRecord: 'SyncRecord') -> None: ...
    
    def readSet(self, j: 'java.io.InputStream') -> bool: ...
    
    def removeSubset(self, s: str) -> None: ...
    
    def setLabel(self, s: str) -> None: ...
    
    @staticmethod
    def stringValueFor(b: bool) -> str: ...
    
    def toMultilineHumanReadableString(self) -> str: ...
    
    def toString(self) -> str: ...
    
    @staticmethod
    def unescapeAndDecodeUTF8(list: List[int], i: int, i2: int) -> str: ...
    
    def writeSet(self, j: 'java.io.Writer') -> None: ...
    
    def writeToBytes(self) -> List[int]: ...
    
    def writeToString(self) -> str: ...
    
    
class SyncStorage(SyncFolder):
    def __init__(self): ...
    
    def delete(self, s: str) -> None: ...
    
    def exists(self, s: str) -> bool: ...
    
    def getModified(self, s: str) -> 'java.util.Date': ...
    
    def isFolder(self, s: str) -> bool: ...
    
    def listFiles(self, s: str) -> List[str]: ...
    
    def listSubfolders(self, s: str) -> List[str]: ...
    
    def moveFile(self, s: str, s2: str) -> None: ...
    
    def openFileForReading(self, s: str) -> 'java.io.InputStream': ...
    
    def openFileForWriting(self, s: str) -> 'java.io.OutputStream': ...
    
    def setModified(self, s: str, i: int) -> None: ...
    
    def writeFile(self, s: str, j: 'java.io.InputStream') -> None: ...
    
    def writeToFileAtomically(self, list: List[int], s: str) -> None: ...
    
    
class SyncableDoc:
    def __init__(self): ...
    
    def allItems(self) -> List['SyncableItem']: ...
    
    def didApplyUpdates(self) -> None: ...
    
    def getIsFinishedInitialLoad(self) -> bool: ...
    
    def getLocalStorage(self) -> SyncStorage: ...
    
    def getPublicSyncInfo(self) -> SyncRecord: ...
    
    def getShouldDownloadAllAttachments(self) -> bool: ...
    
    def getSyncBytesReceived(self) -> int: ...
    
    def isSyncMaster(self) -> bool: ...
    
    def itemForID(self, s: str) -> 'SyncableItem': ...
    
    def notifyDataReplaced(self) -> None: ...
    
    def notifyDataUpdated(self) -> None: ...
    
    def setFinishedInitialLoad(self, b: bool) -> None: ...
    
    def syncingBegan(self) -> None: ...
    
    def syncingFinished(self, b: bool, s: str) -> None: ...
    
    def syncingStopping(self) -> None: ...
    
    def trunkDataLoaded(self) -> None: ...
    
    def willApplyUpdates(self) -> None: ...
    
    
class SyncableItem:
    ITEM_KEY_ID = u'id'
    ITEM_KEY_TIMESTAMP = u'ts'
    ITEM_TYPE_KEY = u'obj_type'
    
    def __init__(self): ...
    
    def getSyncItemType(self) -> str: ...
    
    def getSyncTimestamp(self) -> int: ...
    
    def getUUID(self) -> str: ...
    
    def itemWasUpdated(self, syncRecord: SyncRecord) -> None: ...
    
    def itemWillSync(self, syncRecord: SyncRecord) -> None: ...
    
    
class Syncer:
    ATTACHMENTS_FOLDER = u'attach'
    DEBUG = False
    DELETE_TO_PUSH_NEW_SYNC_INFO_FILE = u'tiksync/delete_to_push_sync_info'
    FORCE_PULL_RESYNC_FILE = u'tiksync/force_pull_resync'
    FORCE_PUSH_RESYNC_FILE = u'tiksync/force_push_resync'
    HISTORY_PATH = u'tiksync/archive'
    INCOMING_PATH = u'tiksync/in'
    OUTGOING_PATH = u'tiksync/out'
    OUTGOING_TXN_FILE_EXTENSION = u'mdtxn'
    SYNC_INFO_FILE = u'tiksync_info.txt'
    SYNC_KEY_TEST_FILE = u'key_test'
    SYNC_KEY_TEST_KEY = u'test'
    SYNC_KEY_TEST_VALUE = u'Hello, how are you?'
    TEMPORARY_TXN_FILE_EXTENSION = u'txn-tmp'
    TRUNK_DOWNLOAD_FILE_NAME = u'tiksync/trunk_dl'
    TRUNK_FILE_NAME = u'tiksync/trunk'
    TRUNK_SAVE_FILE_NAME = u'tiksync/trunk_sv'
    TXN_FILE_EXTENSION = u'txn'
    TXN_TYPE_DEL = u'del'
    TXN_TYPE_DEL_PREFIX = u'del.'
    UPLOAD_BUFFER_FILE_NAME = u'tiksync/uploadbuf'
    UPLOAD_FILE_NAME = u'txns.upload'
    
    def __init__(self, syncableDoc: SyncableDoc): ...
    
    def addSyncListener(self, syncListener: SyncListener) -> None: ...
    
    def addTxn(self, syncRecord: SyncRecord) -> None: ...
    
    def addTxns(self, list: List[SyncRecord]) -> None: ...
    
    def applyTxnsFromStream(self, s: str, b: bool) -> bool: ...
    
    def compressLocalStorage(self) -> None: ...
    
    def deleteLocalHistory(self) -> None: ...
    
    def doInitialLoad(self) -> None: ...
    
    def downloadTrunkFile(self) -> str: ...
    
    def forceResyncFromLocal(self) -> None: ...
    
    def getSyncedDocument(self) -> SyncableDoc: ...
    
    def goneAway(self) -> None: ...
    
    def initializeAsNewSecondary(self) -> None: ...
    
    def interruptSyncThread(self) -> None: ...
    
    def isPausing(self) -> bool: ...
    
    def isRunningInBackground(self) -> bool: ...
    
    def isSyncing(self) -> bool: ...
    
    def pauseThread(self) -> None: ...
    
    def removeSyncListener(self, syncListener: SyncListener) -> None: ...
    
    def replaceLocalDataWithSynced(self) -> None: ...
    
    def resetSyncingAndWaitForRemoteData(self) -> bool: ...
    
    def resumeThread(self) -> None: ...
    
    def runInBackground(self) -> None: ...
    
    def saveNewTrunkFile(self, b: bool) -> None: ...
    
    def setCallback(self, syncDelegate: SyncDelegate) -> None: ...
    
    def setSyncFolder(self, syncFolder: SyncFolder) -> None: ...
    
    def stopSyncing(self) -> None: ...
    
    def syncTxnLogToStorage(self) -> bool: ...
    
    def waitForRemoteData(self) -> bool: ...
    
    
